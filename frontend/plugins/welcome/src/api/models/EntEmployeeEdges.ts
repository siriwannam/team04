/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Patient
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntArea,
    EntAreaFromJSON,
    EntAreaFromJSONTyped,
    EntAreaToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentFromJSONTyped,
    EntDepartmentToJSON,
    EntDiagnosis,
    EntDiagnosisFromJSON,
    EntDiagnosisFromJSONTyped,
    EntDiagnosisToJSON,
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseFromJSONTyped,
    EntDiseaseToJSON,
    EntDrug,
    EntDrugFromJSON,
    EntDrugFromJSONTyped,
    EntDrugToJSON,
    EntNametitle,
    EntNametitleFromJSON,
    EntNametitleFromJSONTyped,
    EntNametitleToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientFromJSONTyped,
    EntPatientToJSON,
    EntPlace,
    EntPlaceFromJSON,
    EntPlaceFromJSONTyped,
    EntPlaceToJSON,
} from './';

/**
 * 
 * @export
 * @interface EntEmployeeEdges
 */
export interface EntEmployeeEdges {
    /**
     * Area holds the value of the area edge.
     * @type {Array<EntArea>}
     * @memberof EntEmployeeEdges
     */
    area?: Array<EntArea>;
    /**
     * 
     * @type {EntDepartment}
     * @memberof EntEmployeeEdges
     */
    department?: EntDepartment;
    /**
     * Diagnosis holds the value of the diagnosis edge.
     * @type {Array<EntDiagnosis>}
     * @memberof EntEmployeeEdges
     */
    diagnosis?: Array<EntDiagnosis>;
    /**
     * Disease holds the value of the disease edge.
     * @type {Array<EntDisease>}
     * @memberof EntEmployeeEdges
     */
    disease?: Array<EntDisease>;
    /**
     * Drug holds the value of the drug edge.
     * @type {Array<EntDrug>}
     * @memberof EntEmployeeEdges
     */
    drug?: Array<EntDrug>;
    /**
     * 
     * @type {EntNametitle}
     * @memberof EntEmployeeEdges
     */
    nametitle?: EntNametitle;
    /**
     * Patient holds the value of the patient edge.
     * @type {Array<EntPatient>}
     * @memberof EntEmployeeEdges
     */
    patient?: Array<EntPatient>;
    /**
     * 
     * @type {EntPlace}
     * @memberof EntEmployeeEdges
     */
    place?: EntPlace;
}

export function EntEmployeeEdgesFromJSON(json: any): EntEmployeeEdges {
    return EntEmployeeEdgesFromJSONTyped(json, false);
}

export function EntEmployeeEdgesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EntEmployeeEdges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'area': !exists(json, 'Area') ? undefined : ((json['Area'] as Array<any>).map(EntAreaFromJSON)),
        'department': !exists(json, 'Department') ? undefined : EntDepartmentFromJSON(json['Department']),
        'diagnosis': !exists(json, 'Diagnosis') ? undefined : ((json['Diagnosis'] as Array<any>).map(EntDiagnosisFromJSON)),
        'disease': !exists(json, 'Disease') ? undefined : ((json['Disease'] as Array<any>).map(EntDiseaseFromJSON)),
        'drug': !exists(json, 'Drug') ? undefined : ((json['Drug'] as Array<any>).map(EntDrugFromJSON)),
        'nametitle': !exists(json, 'Nametitle') ? undefined : EntNametitleFromJSON(json['Nametitle']),
        'patient': !exists(json, 'Patient') ? undefined : ((json['Patient'] as Array<any>).map(EntPatientFromJSON)),
        'place': !exists(json, 'Place') ? undefined : EntPlaceFromJSON(json['Place']),
    };
}

export function EntEmployeeEdgesToJSON(value?: EntEmployeeEdges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'area': value.area === undefined ? undefined : ((value.area as Array<any>).map(EntAreaToJSON)),
        'department': EntDepartmentToJSON(value.department),
        'diagnosis': value.diagnosis === undefined ? undefined : ((value.diagnosis as Array<any>).map(EntDiagnosisToJSON)),
        'disease': value.disease === undefined ? undefined : ((value.disease as Array<any>).map(EntDiseaseToJSON)),
        'drug': value.drug === undefined ? undefined : ((value.drug as Array<any>).map(EntDrugToJSON)),
        'nametitle': EntNametitleToJSON(value.nametitle),
        'patient': value.patient === undefined ? undefined : ((value.patient as Array<any>).map(EntPatientToJSON)),
        'place': EntPlaceToJSON(value.place),
    };
}


