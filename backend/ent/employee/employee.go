// Code generated by entc, DO NOT EDIT.

package employee

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldEmployeeName holds the string denoting the employeename field in the database.
	FieldEmployeeName = "employee_name"
	// FieldTel holds the string denoting the tel field in the database.
	FieldTel = "tel"
	// FieldBirthdayDate holds the string denoting the birthdaydate field in the database.
	FieldBirthdayDate = "birthday_date"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"

	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgePlace holds the string denoting the place edge name in mutations.
	EdgePlace = "place"
	// EdgeNametitle holds the string denoting the nametitle edge name in mutations.
	EdgeNametitle = "nametitle"
	// EdgeArea holds the string denoting the area edge name in mutations.
	EdgeArea = "area"
	// EdgeDisease holds the string denoting the disease edge name in mutations.
	EdgeDisease = "disease"
	// EdgeDrug holds the string denoting the drug edge name in mutations.
	EdgeDrug = "drug"
	// EdgeDiagnosis holds the string denoting the diagnosis edge name in mutations.
	EdgeDiagnosis = "diagnosis"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "patient"

	// Table holds the table name of the employee in the database.
	Table = "employees"
	// DepartmentTable is the table the holds the department relation/edge.
	DepartmentTable = "employees"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "departments"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_employee"
	// PlaceTable is the table the holds the place relation/edge.
	PlaceTable = "employees"
	// PlaceInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlaceInverseTable = "places"
	// PlaceColumn is the table column denoting the place relation/edge.
	PlaceColumn = "place_employee"
	// NametitleTable is the table the holds the nametitle relation/edge.
	NametitleTable = "employees"
	// NametitleInverseTable is the table name for the Nametitle entity.
	// It exists in this package in order to avoid circular dependency with the "nametitle" package.
	NametitleInverseTable = "nametitles"
	// NametitleColumn is the table column denoting the nametitle relation/edge.
	NametitleColumn = "nametitle_employee"
	// AreaTable is the table the holds the area relation/edge.
	AreaTable = "areas"
	// AreaInverseTable is the table name for the Area entity.
	// It exists in this package in order to avoid circular dependency with the "area" package.
	AreaInverseTable = "areas"
	// AreaColumn is the table column denoting the area relation/edge.
	AreaColumn = "employee_area"
	// DiseaseTable is the table the holds the disease relation/edge.
	DiseaseTable = "diseases"
	// DiseaseInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	DiseaseInverseTable = "diseases"
	// DiseaseColumn is the table column denoting the disease relation/edge.
	DiseaseColumn = "employee_disease"
	// DrugTable is the table the holds the drug relation/edge.
	DrugTable = "drugs"
	// DrugInverseTable is the table name for the Drug entity.
	// It exists in this package in order to avoid circular dependency with the "drug" package.
	DrugInverseTable = "drugs"
	// DrugColumn is the table column denoting the drug relation/edge.
	DrugColumn = "employee_drug"
	// DiagnosisTable is the table the holds the diagnosis relation/edge.
	DiagnosisTable = "diagnoses"
	// DiagnosisInverseTable is the table name for the Diagnosis entity.
	// It exists in this package in order to avoid circular dependency with the "diagnosis" package.
	DiagnosisInverseTable = "diagnoses"
	// DiagnosisColumn is the table column denoting the diagnosis relation/edge.
	DiagnosisColumn = "employee_diagnosis"
	// PatientTable is the table the holds the patient relation/edge.
	PatientTable = "patients"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the patient relation/edge.
	PatientColumn = "employee_patient"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldEmployeeName,
	FieldTel,
	FieldBirthdayDate,
	FieldEmail,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Employee type.
var ForeignKeys = []string{
	"department_employee",
	"nametitle_employee",
	"place_employee",
}

var (
	// UserIdValidator is a validator for the "UserId" field. It is called by the builders before save.
	UserIdValidator func(string) error
	// EmployeeNameValidator is a validator for the "EmployeeName" field. It is called by the builders before save.
	EmployeeNameValidator func(string) error
	// TelValidator is a validator for the "Tel" field. It is called by the builders before save.
	TelValidator func(string) error
	// EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
)
