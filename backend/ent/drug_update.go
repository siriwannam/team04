// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/drugtype"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DrugUpdate is the builder for updating Drug entities.
type DrugUpdate struct {
	config
	hooks      []Hook
	mutation   *DrugMutation
	predicates []predicate.Drug
}

// Where adds a new predicate for the builder.
func (du *DrugUpdate) Where(ps ...predicate.Drug) *DrugUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDrugName sets the DrugName field.
func (du *DrugUpdate) SetDrugName(s string) *DrugUpdate {
	du.mutation.SetDrugName(s)
	return du
}

// SetHowto sets the Howto field.
func (du *DrugUpdate) SetHowto(s string) *DrugUpdate {
	du.mutation.SetHowto(s)
	return du
}

// SetProperty sets the Property field.
func (du *DrugUpdate) SetProperty(s string) *DrugUpdate {
	du.mutation.SetProperty(s)
	return du
}

// SetEmployeeID sets the employee edge to Employee by id.
func (du *DrugUpdate) SetEmployeeID(id int) *DrugUpdate {
	du.mutation.SetEmployeeID(id)
	return du
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (du *DrugUpdate) SetNillableEmployeeID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetEmployeeID(*id)
	}
	return du
}

// SetEmployee sets the employee edge to Employee.
func (du *DrugUpdate) SetEmployee(e *Employee) *DrugUpdate {
	return du.SetEmployeeID(e.ID)
}

// SetDrugtypeID sets the drugtype edge to DrugType by id.
func (du *DrugUpdate) SetDrugtypeID(id int) *DrugUpdate {
	du.mutation.SetDrugtypeID(id)
	return du
}

// SetNillableDrugtypeID sets the drugtype edge to DrugType by id if the given value is not nil.
func (du *DrugUpdate) SetNillableDrugtypeID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetDrugtypeID(*id)
	}
	return du
}

// SetDrugtype sets the drugtype edge to DrugType.
func (du *DrugUpdate) SetDrugtype(d *DrugType) *DrugUpdate {
	return du.SetDrugtypeID(d.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (du *DrugUpdate) SetDiseaseID(id int) *DrugUpdate {
	du.mutation.SetDiseaseID(id)
	return du
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (du *DrugUpdate) SetNillableDiseaseID(id *int) *DrugUpdate {
	if id != nil {
		du = du.SetDiseaseID(*id)
	}
	return du
}

// SetDisease sets the disease edge to Disease.
func (du *DrugUpdate) SetDisease(d *Disease) *DrugUpdate {
	return du.SetDiseaseID(d.ID)
}

// Mutation returns the DrugMutation object of the builder.
func (du *DrugUpdate) Mutation() *DrugMutation {
	return du.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (du *DrugUpdate) ClearEmployee() *DrugUpdate {
	du.mutation.ClearEmployee()
	return du
}

// ClearDrugtype clears the drugtype edge to DrugType.
func (du *DrugUpdate) ClearDrugtype() *DrugUpdate {
	du.mutation.ClearDrugtype()
	return du
}

// ClearDisease clears the disease edge to Disease.
func (du *DrugUpdate) ClearDisease() *DrugUpdate {
	du.mutation.ClearDisease()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DrugUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.DrugName(); ok {
		if err := drug.DrugNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "DrugName", err: fmt.Errorf("ent: validator failed for field \"DrugName\": %w", err)}
		}
	}
	if v, ok := du.mutation.Howto(); ok {
		if err := drug.HowtoValidator(v); err != nil {
			return 0, &ValidationError{Name: "Howto", err: fmt.Errorf("ent: validator failed for field \"Howto\": %w", err)}
		}
	}
	if v, ok := du.mutation.Property(); ok {
		if err := drug.PropertyValidator(v); err != nil {
			return 0, &ValidationError{Name: "Property", err: fmt.Errorf("ent: validator failed for field \"Property\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DrugUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DrugUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DrugUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DrugUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drug.Table,
			Columns: drug.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drug.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DrugName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldDrugName,
		})
	}
	if value, ok := du.mutation.Howto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldHowto,
		})
	}
	if value, ok := du.mutation.Property(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldProperty,
		})
	}
	if du.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.EmployeeTable,
			Columns: []string{drug.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.EmployeeTable,
			Columns: []string{drug.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DrugtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DrugtypeTable,
			Columns: []string{drug.DrugtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DrugtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DrugtypeTable,
			Columns: []string{drug.DrugtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DiseaseTable,
			Columns: []string{drug.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DiseaseTable,
			Columns: []string{drug.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drug.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DrugUpdateOne is the builder for updating a single Drug entity.
type DrugUpdateOne struct {
	config
	hooks    []Hook
	mutation *DrugMutation
}

// SetDrugName sets the DrugName field.
func (duo *DrugUpdateOne) SetDrugName(s string) *DrugUpdateOne {
	duo.mutation.SetDrugName(s)
	return duo
}

// SetHowto sets the Howto field.
func (duo *DrugUpdateOne) SetHowto(s string) *DrugUpdateOne {
	duo.mutation.SetHowto(s)
	return duo
}

// SetProperty sets the Property field.
func (duo *DrugUpdateOne) SetProperty(s string) *DrugUpdateOne {
	duo.mutation.SetProperty(s)
	return duo
}

// SetEmployeeID sets the employee edge to Employee by id.
func (duo *DrugUpdateOne) SetEmployeeID(id int) *DrugUpdateOne {
	duo.mutation.SetEmployeeID(id)
	return duo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableEmployeeID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetEmployeeID(*id)
	}
	return duo
}

// SetEmployee sets the employee edge to Employee.
func (duo *DrugUpdateOne) SetEmployee(e *Employee) *DrugUpdateOne {
	return duo.SetEmployeeID(e.ID)
}

// SetDrugtypeID sets the drugtype edge to DrugType by id.
func (duo *DrugUpdateOne) SetDrugtypeID(id int) *DrugUpdateOne {
	duo.mutation.SetDrugtypeID(id)
	return duo
}

// SetNillableDrugtypeID sets the drugtype edge to DrugType by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableDrugtypeID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetDrugtypeID(*id)
	}
	return duo
}

// SetDrugtype sets the drugtype edge to DrugType.
func (duo *DrugUpdateOne) SetDrugtype(d *DrugType) *DrugUpdateOne {
	return duo.SetDrugtypeID(d.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (duo *DrugUpdateOne) SetDiseaseID(id int) *DrugUpdateOne {
	duo.mutation.SetDiseaseID(id)
	return duo
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (duo *DrugUpdateOne) SetNillableDiseaseID(id *int) *DrugUpdateOne {
	if id != nil {
		duo = duo.SetDiseaseID(*id)
	}
	return duo
}

// SetDisease sets the disease edge to Disease.
func (duo *DrugUpdateOne) SetDisease(d *Disease) *DrugUpdateOne {
	return duo.SetDiseaseID(d.ID)
}

// Mutation returns the DrugMutation object of the builder.
func (duo *DrugUpdateOne) Mutation() *DrugMutation {
	return duo.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (duo *DrugUpdateOne) ClearEmployee() *DrugUpdateOne {
	duo.mutation.ClearEmployee()
	return duo
}

// ClearDrugtype clears the drugtype edge to DrugType.
func (duo *DrugUpdateOne) ClearDrugtype() *DrugUpdateOne {
	duo.mutation.ClearDrugtype()
	return duo
}

// ClearDisease clears the disease edge to Disease.
func (duo *DrugUpdateOne) ClearDisease() *DrugUpdateOne {
	duo.mutation.ClearDisease()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DrugUpdateOne) Save(ctx context.Context) (*Drug, error) {
	if v, ok := duo.mutation.DrugName(); ok {
		if err := drug.DrugNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "DrugName", err: fmt.Errorf("ent: validator failed for field \"DrugName\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Howto(); ok {
		if err := drug.HowtoValidator(v); err != nil {
			return nil, &ValidationError{Name: "Howto", err: fmt.Errorf("ent: validator failed for field \"Howto\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Property(); ok {
		if err := drug.PropertyValidator(v); err != nil {
			return nil, &ValidationError{Name: "Property", err: fmt.Errorf("ent: validator failed for field \"Property\": %w", err)}
		}
	}

	var (
		err  error
		node *Drug
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DrugUpdateOne) SaveX(ctx context.Context) *Drug {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DrugUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DrugUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DrugUpdateOne) sqlSave(ctx context.Context) (d *Drug, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   drug.Table,
			Columns: drug.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drug.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Drug.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.DrugName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldDrugName,
		})
	}
	if value, ok := duo.mutation.Howto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldHowto,
		})
	}
	if value, ok := duo.mutation.Property(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldProperty,
		})
	}
	if duo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.EmployeeTable,
			Columns: []string{drug.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.EmployeeTable,
			Columns: []string{drug.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DrugtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DrugtypeTable,
			Columns: []string{drug.DrugtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DrugtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DrugtypeTable,
			Columns: []string{drug.DrugtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DiseaseTable,
			Columns: []string{drug.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DiseaseTable,
			Columns: []string{drug.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Drug{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drug.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
