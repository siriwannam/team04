// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/department"
	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/nametitle"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/B6001186/Contagions/ent/place"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetUserId sets the UserId field.
func (ec *EmployeeCreate) SetUserId(s string) *EmployeeCreate {
	ec.mutation.SetUserId(s)
	return ec
}

// SetEmployeeName sets the EmployeeName field.
func (ec *EmployeeCreate) SetEmployeeName(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeName(s)
	return ec
}

// SetTel sets the Tel field.
func (ec *EmployeeCreate) SetTel(s string) *EmployeeCreate {
	ec.mutation.SetTel(s)
	return ec
}

// SetBirthdayDate sets the BirthdayDate field.
func (ec *EmployeeCreate) SetBirthdayDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetBirthdayDate(t)
	return ec
}

// SetEmail sets the Email field.
func (ec *EmployeeCreate) SetEmail(s string) *EmployeeCreate {
	ec.mutation.SetEmail(s)
	return ec
}

// SetPassword sets the Password field.
func (ec *EmployeeCreate) SetPassword(s string) *EmployeeCreate {
	ec.mutation.SetPassword(s)
	return ec
}

// SetDepartmentID sets the department edge to Department by id.
func (ec *EmployeeCreate) SetDepartmentID(id int) *EmployeeCreate {
	ec.mutation.SetDepartmentID(id)
	return ec
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDepartmentID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetDepartmentID(*id)
	}
	return ec
}

// SetDepartment sets the department edge to Department.
func (ec *EmployeeCreate) SetDepartment(d *Department) *EmployeeCreate {
	return ec.SetDepartmentID(d.ID)
}

// SetPlaceID sets the place edge to Place by id.
func (ec *EmployeeCreate) SetPlaceID(id int) *EmployeeCreate {
	ec.mutation.SetPlaceID(id)
	return ec
}

// SetNillablePlaceID sets the place edge to Place by id if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePlaceID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetPlaceID(*id)
	}
	return ec
}

// SetPlace sets the place edge to Place.
func (ec *EmployeeCreate) SetPlace(p *Place) *EmployeeCreate {
	return ec.SetPlaceID(p.ID)
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (ec *EmployeeCreate) SetNametitleID(id int) *EmployeeCreate {
	ec.mutation.SetNametitleID(id)
	return ec
}

// SetNillableNametitleID sets the nametitle edge to Nametitle by id if the given value is not nil.
func (ec *EmployeeCreate) SetNillableNametitleID(id *int) *EmployeeCreate {
	if id != nil {
		ec = ec.SetNametitleID(*id)
	}
	return ec
}

// SetNametitle sets the nametitle edge to Nametitle.
func (ec *EmployeeCreate) SetNametitle(n *Nametitle) *EmployeeCreate {
	return ec.SetNametitleID(n.ID)
}

// AddAreaIDs adds the area edge to Area by ids.
func (ec *EmployeeCreate) AddAreaIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddAreaIDs(ids...)
	return ec
}

// AddArea adds the area edges to Area.
func (ec *EmployeeCreate) AddArea(a ...*Area) *EmployeeCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAreaIDs(ids...)
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (ec *EmployeeCreate) AddDiseaseIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddDiseaseIDs(ids...)
	return ec
}

// AddDisease adds the disease edges to Disease.
func (ec *EmployeeCreate) AddDisease(d ...*Disease) *EmployeeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDiseaseIDs(ids...)
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (ec *EmployeeCreate) AddDrugIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddDrugIDs(ids...)
	return ec
}

// AddDrug adds the drug edges to Drug.
func (ec *EmployeeCreate) AddDrug(d ...*Drug) *EmployeeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDrugIDs(ids...)
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (ec *EmployeeCreate) AddDiagnosiIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddDiagnosiIDs(ids...)
	return ec
}

// AddDiagnosis adds the diagnosis edges to Diagnosis.
func (ec *EmployeeCreate) AddDiagnosis(d ...*Diagnosis) *EmployeeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ec.AddDiagnosiIDs(ids...)
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (ec *EmployeeCreate) AddPatientIDs(ids ...int) *EmployeeCreate {
	ec.mutation.AddPatientIDs(ids...)
	return ec
}

// AddPatient adds the patient edges to Patient.
func (ec *EmployeeCreate) AddPatient(p ...*Patient) *EmployeeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ec.AddPatientIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	if _, ok := ec.mutation.UserId(); !ok {
		return nil, &ValidationError{Name: "UserId", err: errors.New("ent: missing required field \"UserId\"")}
	}
	if v, ok := ec.mutation.UserId(); ok {
		if err := employee.UserIdValidator(v); err != nil {
			return nil, &ValidationError{Name: "UserId", err: fmt.Errorf("ent: validator failed for field \"UserId\": %w", err)}
		}
	}
	if _, ok := ec.mutation.EmployeeName(); !ok {
		return nil, &ValidationError{Name: "EmployeeName", err: errors.New("ent: missing required field \"EmployeeName\"")}
	}
	if v, ok := ec.mutation.EmployeeName(); ok {
		if err := employee.EmployeeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "EmployeeName", err: fmt.Errorf("ent: validator failed for field \"EmployeeName\": %w", err)}
		}
	}
	if _, ok := ec.mutation.Tel(); !ok {
		return nil, &ValidationError{Name: "Tel", err: errors.New("ent: missing required field \"Tel\"")}
	}
	if v, ok := ec.mutation.Tel(); ok {
		if err := employee.TelValidator(v); err != nil {
			return nil, &ValidationError{Name: "Tel", err: fmt.Errorf("ent: validator failed for field \"Tel\": %w", err)}
		}
	}
	if _, ok := ec.mutation.BirthdayDate(); !ok {
		return nil, &ValidationError{Name: "BirthdayDate", err: errors.New("ent: missing required field \"BirthdayDate\"")}
	}
	if _, ok := ec.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "Email", err: errors.New("ent: missing required field \"Email\"")}
	}
	if v, ok := ec.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if _, ok := ec.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "Password", err: errors.New("ent: missing required field \"Password\"")}
	}
	if v, ok := ec.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Password", err: fmt.Errorf("ent: validator failed for field \"Password\": %w", err)}
		}
	}
	var (
		err  error
		node *Employee
	)
	if len(ec.hooks) == 0 {
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	e, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	e.ID = int(id)
	return e, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		e     = &Employee{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: employee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUserId,
		})
		e.UserId = value
	}
	if value, ok := ec.mutation.EmployeeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeeName,
		})
		e.EmployeeName = value
	}
	if value, ok := ec.mutation.Tel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldTel,
		})
		e.Tel = value
	}
	if value, ok := ec.mutation.BirthdayDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldBirthdayDate,
		})
		e.BirthdayDate = value
	}
	if value, ok := ec.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
		e.Email = value
	}
	if value, ok := ec.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
		e.Password = value
	}
	if nodes := ec.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PlaceTable,
			Columns: []string{employee.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NametitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.NametitleTable,
			Columns: []string{employee.NametitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nametitle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AreaTable,
			Columns: []string{employee.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiseaseTable,
			Columns: []string{employee.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DrugTable,
			Columns: []string{employee.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiagnosisTable,
			Columns: []string{employee.DiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PatientTable,
			Columns: []string{employee.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return e, _spec
}
