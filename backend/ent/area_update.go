// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/level"
	"github.com/B6001186/Contagions/ent/predicate"
	"github.com/B6001186/Contagions/ent/statistic"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AreaUpdate is the builder for updating Area entities.
type AreaUpdate struct {
	config
	hooks      []Hook
	mutation   *AreaMutation
	predicates []predicate.Area
}

// Where adds a new predicate for the builder.
func (au *AreaUpdate) Where(ps ...predicate.Area) *AreaUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetAreaName sets the AreaName field.
func (au *AreaUpdate) SetAreaName(s string) *AreaUpdate {
	au.mutation.SetAreaName(s)
	return au
}

// SetAreaDistrict sets the AreaDistrict field.
func (au *AreaUpdate) SetAreaDistrict(s string) *AreaUpdate {
	au.mutation.SetAreaDistrict(s)
	return au
}

// SetAreaSubDistrict sets the AreaSubDistrict field.
func (au *AreaUpdate) SetAreaSubDistrict(s string) *AreaUpdate {
	au.mutation.SetAreaSubDistrict(s)
	return au
}

// SetDiseaseID sets the disease edge to Disease by id.
func (au *AreaUpdate) SetDiseaseID(id int) *AreaUpdate {
	au.mutation.SetDiseaseID(id)
	return au
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (au *AreaUpdate) SetNillableDiseaseID(id *int) *AreaUpdate {
	if id != nil {
		au = au.SetDiseaseID(*id)
	}
	return au
}

// SetDisease sets the disease edge to Disease.
func (au *AreaUpdate) SetDisease(d *Disease) *AreaUpdate {
	return au.SetDiseaseID(d.ID)
}

// SetStatisticID sets the statistic edge to Statistic by id.
func (au *AreaUpdate) SetStatisticID(id int) *AreaUpdate {
	au.mutation.SetStatisticID(id)
	return au
}

// SetNillableStatisticID sets the statistic edge to Statistic by id if the given value is not nil.
func (au *AreaUpdate) SetNillableStatisticID(id *int) *AreaUpdate {
	if id != nil {
		au = au.SetStatisticID(*id)
	}
	return au
}

// SetStatistic sets the statistic edge to Statistic.
func (au *AreaUpdate) SetStatistic(s *Statistic) *AreaUpdate {
	return au.SetStatisticID(s.ID)
}

// SetLevelID sets the level edge to Level by id.
func (au *AreaUpdate) SetLevelID(id int) *AreaUpdate {
	au.mutation.SetLevelID(id)
	return au
}

// SetNillableLevelID sets the level edge to Level by id if the given value is not nil.
func (au *AreaUpdate) SetNillableLevelID(id *int) *AreaUpdate {
	if id != nil {
		au = au.SetLevelID(*id)
	}
	return au
}

// SetLevel sets the level edge to Level.
func (au *AreaUpdate) SetLevel(l *Level) *AreaUpdate {
	return au.SetLevelID(l.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (au *AreaUpdate) SetEmployeeID(id int) *AreaUpdate {
	au.mutation.SetEmployeeID(id)
	return au
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (au *AreaUpdate) SetNillableEmployeeID(id *int) *AreaUpdate {
	if id != nil {
		au = au.SetEmployeeID(*id)
	}
	return au
}

// SetEmployee sets the employee edge to Employee.
func (au *AreaUpdate) SetEmployee(e *Employee) *AreaUpdate {
	return au.SetEmployeeID(e.ID)
}

// Mutation returns the AreaMutation object of the builder.
func (au *AreaUpdate) Mutation() *AreaMutation {
	return au.mutation
}

// ClearDisease clears the disease edge to Disease.
func (au *AreaUpdate) ClearDisease() *AreaUpdate {
	au.mutation.ClearDisease()
	return au
}

// ClearStatistic clears the statistic edge to Statistic.
func (au *AreaUpdate) ClearStatistic() *AreaUpdate {
	au.mutation.ClearStatistic()
	return au
}

// ClearLevel clears the level edge to Level.
func (au *AreaUpdate) ClearLevel() *AreaUpdate {
	au.mutation.ClearLevel()
	return au
}

// ClearEmployee clears the employee edge to Employee.
func (au *AreaUpdate) ClearEmployee() *AreaUpdate {
	au.mutation.ClearEmployee()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AreaUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := au.mutation.AreaName(); ok {
		if err := area.AreaNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "AreaName", err: fmt.Errorf("ent: validator failed for field \"AreaName\": %w", err)}
		}
	}
	if v, ok := au.mutation.AreaDistrict(); ok {
		if err := area.AreaDistrictValidator(v); err != nil {
			return 0, &ValidationError{Name: "AreaDistrict", err: fmt.Errorf("ent: validator failed for field \"AreaDistrict\": %w", err)}
		}
	}
	if v, ok := au.mutation.AreaSubDistrict(); ok {
		if err := area.AreaSubDistrictValidator(v); err != nil {
			return 0, &ValidationError{Name: "AreaSubDistrict", err: fmt.Errorf("ent: validator failed for field \"AreaSubDistrict\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AreaUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AreaUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AreaUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: area.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AreaName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaName,
		})
	}
	if value, ok := au.mutation.AreaDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaDistrict,
		})
	}
	if value, ok := au.mutation.AreaSubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaSubDistrict,
		})
	}
	if au.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.DiseaseTable,
			Columns: []string{area.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.DiseaseTable,
			Columns: []string{area.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.StatisticTable,
			Columns: []string{area.StatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statistic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.StatisticTable,
			Columns: []string{area.StatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.LevelTable,
			Columns: []string{area.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.LevelTable,
			Columns: []string{area.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.EmployeeTable,
			Columns: []string{area.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.EmployeeTable,
			Columns: []string{area.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AreaUpdateOne is the builder for updating a single Area entity.
type AreaUpdateOne struct {
	config
	hooks    []Hook
	mutation *AreaMutation
}

// SetAreaName sets the AreaName field.
func (auo *AreaUpdateOne) SetAreaName(s string) *AreaUpdateOne {
	auo.mutation.SetAreaName(s)
	return auo
}

// SetAreaDistrict sets the AreaDistrict field.
func (auo *AreaUpdateOne) SetAreaDistrict(s string) *AreaUpdateOne {
	auo.mutation.SetAreaDistrict(s)
	return auo
}

// SetAreaSubDistrict sets the AreaSubDistrict field.
func (auo *AreaUpdateOne) SetAreaSubDistrict(s string) *AreaUpdateOne {
	auo.mutation.SetAreaSubDistrict(s)
	return auo
}

// SetDiseaseID sets the disease edge to Disease by id.
func (auo *AreaUpdateOne) SetDiseaseID(id int) *AreaUpdateOne {
	auo.mutation.SetDiseaseID(id)
	return auo
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableDiseaseID(id *int) *AreaUpdateOne {
	if id != nil {
		auo = auo.SetDiseaseID(*id)
	}
	return auo
}

// SetDisease sets the disease edge to Disease.
func (auo *AreaUpdateOne) SetDisease(d *Disease) *AreaUpdateOne {
	return auo.SetDiseaseID(d.ID)
}

// SetStatisticID sets the statistic edge to Statistic by id.
func (auo *AreaUpdateOne) SetStatisticID(id int) *AreaUpdateOne {
	auo.mutation.SetStatisticID(id)
	return auo
}

// SetNillableStatisticID sets the statistic edge to Statistic by id if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableStatisticID(id *int) *AreaUpdateOne {
	if id != nil {
		auo = auo.SetStatisticID(*id)
	}
	return auo
}

// SetStatistic sets the statistic edge to Statistic.
func (auo *AreaUpdateOne) SetStatistic(s *Statistic) *AreaUpdateOne {
	return auo.SetStatisticID(s.ID)
}

// SetLevelID sets the level edge to Level by id.
func (auo *AreaUpdateOne) SetLevelID(id int) *AreaUpdateOne {
	auo.mutation.SetLevelID(id)
	return auo
}

// SetNillableLevelID sets the level edge to Level by id if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableLevelID(id *int) *AreaUpdateOne {
	if id != nil {
		auo = auo.SetLevelID(*id)
	}
	return auo
}

// SetLevel sets the level edge to Level.
func (auo *AreaUpdateOne) SetLevel(l *Level) *AreaUpdateOne {
	return auo.SetLevelID(l.ID)
}

// SetEmployeeID sets the employee edge to Employee by id.
func (auo *AreaUpdateOne) SetEmployeeID(id int) *AreaUpdateOne {
	auo.mutation.SetEmployeeID(id)
	return auo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (auo *AreaUpdateOne) SetNillableEmployeeID(id *int) *AreaUpdateOne {
	if id != nil {
		auo = auo.SetEmployeeID(*id)
	}
	return auo
}

// SetEmployee sets the employee edge to Employee.
func (auo *AreaUpdateOne) SetEmployee(e *Employee) *AreaUpdateOne {
	return auo.SetEmployeeID(e.ID)
}

// Mutation returns the AreaMutation object of the builder.
func (auo *AreaUpdateOne) Mutation() *AreaMutation {
	return auo.mutation
}

// ClearDisease clears the disease edge to Disease.
func (auo *AreaUpdateOne) ClearDisease() *AreaUpdateOne {
	auo.mutation.ClearDisease()
	return auo
}

// ClearStatistic clears the statistic edge to Statistic.
func (auo *AreaUpdateOne) ClearStatistic() *AreaUpdateOne {
	auo.mutation.ClearStatistic()
	return auo
}

// ClearLevel clears the level edge to Level.
func (auo *AreaUpdateOne) ClearLevel() *AreaUpdateOne {
	auo.mutation.ClearLevel()
	return auo
}

// ClearEmployee clears the employee edge to Employee.
func (auo *AreaUpdateOne) ClearEmployee() *AreaUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AreaUpdateOne) Save(ctx context.Context) (*Area, error) {
	if v, ok := auo.mutation.AreaName(); ok {
		if err := area.AreaNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "AreaName", err: fmt.Errorf("ent: validator failed for field \"AreaName\": %w", err)}
		}
	}
	if v, ok := auo.mutation.AreaDistrict(); ok {
		if err := area.AreaDistrictValidator(v); err != nil {
			return nil, &ValidationError{Name: "AreaDistrict", err: fmt.Errorf("ent: validator failed for field \"AreaDistrict\": %w", err)}
		}
	}
	if v, ok := auo.mutation.AreaSubDistrict(); ok {
		if err := area.AreaSubDistrictValidator(v); err != nil {
			return nil, &ValidationError{Name: "AreaSubDistrict", err: fmt.Errorf("ent: validator failed for field \"AreaSubDistrict\": %w", err)}
		}
	}

	var (
		err  error
		node *Area
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AreaUpdateOne) SaveX(ctx context.Context) *Area {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AreaUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AreaUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AreaUpdateOne) sqlSave(ctx context.Context) (a *Area, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   area.Table,
			Columns: area.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: area.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Area.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.AreaName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaName,
		})
	}
	if value, ok := auo.mutation.AreaDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaDistrict,
		})
	}
	if value, ok := auo.mutation.AreaSubDistrict(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: area.FieldAreaSubDistrict,
		})
	}
	if auo.mutation.DiseaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.DiseaseTable,
			Columns: []string{area.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.DiseaseTable,
			Columns: []string{area.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StatisticCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.StatisticTable,
			Columns: []string{area.StatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statistic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StatisticIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.StatisticTable,
			Columns: []string{area.StatisticColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statistic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.LevelTable,
			Columns: []string{area.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.LevelTable,
			Columns: []string{area.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: level.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.EmployeeTable,
			Columns: []string{area.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   area.EmployeeTable,
			Columns: []string{area.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Area{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{area.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
