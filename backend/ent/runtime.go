// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/B6001186/Contagions/ent/schema"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	areaFields := schema.Area{}.Fields()
	_ = areaFields
	// areaDescAreaName is the schema descriptor for AreaName field.
	areaDescAreaName := areaFields[0].Descriptor()
	// area.AreaNameValidator is a validator for the "AreaName" field. It is called by the builders before save.
	area.AreaNameValidator = areaDescAreaName.Validators[0].(func(string) error)
	// areaDescAreaDistrict is the schema descriptor for AreaDistrict field.
	areaDescAreaDistrict := areaFields[1].Descriptor()
	// area.AreaDistrictValidator is a validator for the "AreaDistrict" field. It is called by the builders before save.
	area.AreaDistrictValidator = areaDescAreaDistrict.Validators[0].(func(string) error)
	// areaDescAreaSubDistrict is the schema descriptor for AreaSubDistrict field.
	areaDescAreaSubDistrict := areaFields[2].Descriptor()
	// area.AreaSubDistrictValidator is a validator for the "AreaSubDistrict" field. It is called by the builders before save.
	area.AreaSubDistrictValidator = areaDescAreaSubDistrict.Validators[0].(func(string) error)
	diagnosisFields := schema.Diagnosis{}.Fields()
	_ = diagnosisFields
	// diagnosisDescDiagnosticMessages is the schema descriptor for DiagnosticMessages field.
	diagnosisDescDiagnosticMessages := diagnosisFields[0].Descriptor()
	// diagnosis.DiagnosticMessagesValidator is a validator for the "DiagnosticMessages" field. It is called by the builders before save.
	diagnosis.DiagnosticMessagesValidator = func() func(string) error {
		validators := diagnosisDescDiagnosticMessages.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_DiagnosticMessages string) error {
			for _, fn := range fns {
				if err := fn(_DiagnosticMessages); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// diagnosisDescSurveillancePeriod is the schema descriptor for SurveillancePeriod field.
	diagnosisDescSurveillancePeriod := diagnosisFields[1].Descriptor()
	// diagnosis.SurveillancePeriodValidator is a validator for the "SurveillancePeriod" field. It is called by the builders before save.
	diagnosis.SurveillancePeriodValidator = func() func(string) error {
		validators := diagnosisDescSurveillancePeriod.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_SurveillancePeriod string) error {
			for _, fn := range fns {
				if err := fn(_SurveillancePeriod); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// diagnosisDescTreatment is the schema descriptor for Treatment field.
	diagnosisDescTreatment := diagnosisFields[2].Descriptor()
	// diagnosis.TreatmentValidator is a validator for the "Treatment" field. It is called by the builders before save.
	diagnosis.TreatmentValidator = func() func(string) error {
		validators := diagnosisDescTreatment.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Treatment string) error {
			for _, fn := range fns {
				if err := fn(_Treatment); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	diseaseFields := schema.Disease{}.Fields()
	_ = diseaseFields
	// diseaseDescDiseaseName is the schema descriptor for DiseaseName field.
	diseaseDescDiseaseName := diseaseFields[0].Descriptor()
	// disease.DiseaseNameValidator is a validator for the "DiseaseName" field. It is called by the builders before save.
	disease.DiseaseNameValidator = diseaseDescDiseaseName.Validators[0].(func(string) error)
	// diseaseDescSymptom is the schema descriptor for Symptom field.
	diseaseDescSymptom := diseaseFields[1].Descriptor()
	// disease.SymptomValidator is a validator for the "Symptom" field. It is called by the builders before save.
	disease.SymptomValidator = diseaseDescSymptom.Validators[0].(func(string) error)
	// diseaseDescContagion is the schema descriptor for Contagion field.
	diseaseDescContagion := diseaseFields[2].Descriptor()
	// disease.ContagionValidator is a validator for the "Contagion" field. It is called by the builders before save.
	disease.ContagionValidator = diseaseDescContagion.Validators[0].(func(string) error)
	drugFields := schema.Drug{}.Fields()
	_ = drugFields
	// drugDescDrugName is the schema descriptor for DrugName field.
	drugDescDrugName := drugFields[0].Descriptor()
	// drug.DrugNameValidator is a validator for the "DrugName" field. It is called by the builders before save.
	drug.DrugNameValidator = func() func(string) error {
		validators := drugDescDrugName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_DrugName string) error {
			for _, fn := range fns {
				if err := fn(_DrugName); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// drugDescHowto is the schema descriptor for Howto field.
	drugDescHowto := drugFields[1].Descriptor()
	// drug.HowtoValidator is a validator for the "Howto" field. It is called by the builders before save.
	drug.HowtoValidator = func() func(string) error {
		validators := drugDescHowto.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Howto string) error {
			for _, fn := range fns {
				if err := fn(_Howto); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// drugDescProperty is the schema descriptor for Property field.
	drugDescProperty := drugFields[2].Descriptor()
	// drug.PropertyValidator is a validator for the "Property" field. It is called by the builders before save.
	drug.PropertyValidator = func() func(string) error {
		validators := drugDescProperty.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Property string) error {
			for _, fn := range fns {
				if err := fn(_Property); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	employeeFields := schema.Employee{}.Fields()
	_ = employeeFields
	// employeeDescUserId is the schema descriptor for UserId field.
	employeeDescUserId := employeeFields[0].Descriptor()
	// employee.UserIdValidator is a validator for the "UserId" field. It is called by the builders before save.
	employee.UserIdValidator = employeeDescUserId.Validators[0].(func(string) error)
	// employeeDescEmployeeName is the schema descriptor for EmployeeName field.
	employeeDescEmployeeName := employeeFields[1].Descriptor()
	// employee.EmployeeNameValidator is a validator for the "EmployeeName" field. It is called by the builders before save.
	employee.EmployeeNameValidator = employeeDescEmployeeName.Validators[0].(func(string) error)
	// employeeDescTel is the schema descriptor for Tel field.
	employeeDescTel := employeeFields[2].Descriptor()
	// employee.TelValidator is a validator for the "Tel" field. It is called by the builders before save.
	employee.TelValidator = func() func(string) error {
		validators := employeeDescTel.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Tel string) error {
			for _, fn := range fns {
				if err := fn(_Tel); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// employeeDescEmail is the schema descriptor for Email field.
	employeeDescEmail := employeeFields[4].Descriptor()
	// employee.EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	employee.EmailValidator = employeeDescEmail.Validators[0].(func(string) error)
	// employeeDescPassword is the schema descriptor for Password field.
	employeeDescPassword := employeeFields[5].Descriptor()
	// employee.PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	employee.PasswordValidator = employeeDescPassword.Validators[0].(func(string) error)
	patientFields := schema.Patient{}.Fields()
	_ = patientFields
	// patientDescIdcard is the schema descriptor for Idcard field.
	patientDescIdcard := patientFields[0].Descriptor()
	// patient.IdcardValidator is a validator for the "Idcard" field. It is called by the builders before save.
	patient.IdcardValidator = func() func(string) error {
		validators := patientDescIdcard.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Idcard string) error {
			for _, fn := range fns {
				if err := fn(_Idcard); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// patientDescPatientName is the schema descriptor for PatientName field.
	patientDescPatientName := patientFields[1].Descriptor()
	// patient.PatientNameValidator is a validator for the "PatientName" field. It is called by the builders before save.
	patient.PatientNameValidator = patientDescPatientName.Validators[0].(func(string) error)
	// patientDescAddress is the schema descriptor for Address field.
	patientDescAddress := patientFields[2].Descriptor()
	// patient.AddressValidator is a validator for the "Address" field. It is called by the builders before save.
	patient.AddressValidator = patientDescAddress.Validators[0].(func(string) error)
	// patientDescCongenital is the schema descriptor for Congenital field.
	patientDescCongenital := patientFields[3].Descriptor()
	// patient.CongenitalValidator is a validator for the "Congenital" field. It is called by the builders before save.
	patient.CongenitalValidator = patientDescCongenital.Validators[0].(func(string) error)
	// patientDescAllergic is the schema descriptor for Allergic field.
	patientDescAllergic := patientFields[4].Descriptor()
	// patient.AllergicValidator is a validator for the "Allergic" field. It is called by the builders before save.
	patient.AllergicValidator = patientDescAllergic.Validators[0].(func(string) error)
}
