// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/drugtype"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DrugCreate is the builder for creating a Drug entity.
type DrugCreate struct {
	config
	mutation *DrugMutation
	hooks    []Hook
}

// SetDrugName sets the DrugName field.
func (dc *DrugCreate) SetDrugName(s string) *DrugCreate {
	dc.mutation.SetDrugName(s)
	return dc
}

// SetHowto sets the Howto field.
func (dc *DrugCreate) SetHowto(s string) *DrugCreate {
	dc.mutation.SetHowto(s)
	return dc
}

// SetProperty sets the Property field.
func (dc *DrugCreate) SetProperty(s string) *DrugCreate {
	dc.mutation.SetProperty(s)
	return dc
}

// SetEmployeeID sets the employee edge to Employee by id.
func (dc *DrugCreate) SetEmployeeID(id int) *DrugCreate {
	dc.mutation.SetEmployeeID(id)
	return dc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (dc *DrugCreate) SetNillableEmployeeID(id *int) *DrugCreate {
	if id != nil {
		dc = dc.SetEmployeeID(*id)
	}
	return dc
}

// SetEmployee sets the employee edge to Employee.
func (dc *DrugCreate) SetEmployee(e *Employee) *DrugCreate {
	return dc.SetEmployeeID(e.ID)
}

// SetDrugtypeID sets the drugtype edge to DrugType by id.
func (dc *DrugCreate) SetDrugtypeID(id int) *DrugCreate {
	dc.mutation.SetDrugtypeID(id)
	return dc
}

// SetNillableDrugtypeID sets the drugtype edge to DrugType by id if the given value is not nil.
func (dc *DrugCreate) SetNillableDrugtypeID(id *int) *DrugCreate {
	if id != nil {
		dc = dc.SetDrugtypeID(*id)
	}
	return dc
}

// SetDrugtype sets the drugtype edge to DrugType.
func (dc *DrugCreate) SetDrugtype(d *DrugType) *DrugCreate {
	return dc.SetDrugtypeID(d.ID)
}

// SetDiseaseID sets the disease edge to Disease by id.
func (dc *DrugCreate) SetDiseaseID(id int) *DrugCreate {
	dc.mutation.SetDiseaseID(id)
	return dc
}

// SetNillableDiseaseID sets the disease edge to Disease by id if the given value is not nil.
func (dc *DrugCreate) SetNillableDiseaseID(id *int) *DrugCreate {
	if id != nil {
		dc = dc.SetDiseaseID(*id)
	}
	return dc
}

// SetDisease sets the disease edge to Disease.
func (dc *DrugCreate) SetDisease(d *Disease) *DrugCreate {
	return dc.SetDiseaseID(d.ID)
}

// Mutation returns the DrugMutation object of the builder.
func (dc *DrugCreate) Mutation() *DrugMutation {
	return dc.mutation
}

// Save creates the Drug in the database.
func (dc *DrugCreate) Save(ctx context.Context) (*Drug, error) {
	if _, ok := dc.mutation.DrugName(); !ok {
		return nil, &ValidationError{Name: "DrugName", err: errors.New("ent: missing required field \"DrugName\"")}
	}
	if v, ok := dc.mutation.DrugName(); ok {
		if err := drug.DrugNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "DrugName", err: fmt.Errorf("ent: validator failed for field \"DrugName\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Howto(); !ok {
		return nil, &ValidationError{Name: "Howto", err: errors.New("ent: missing required field \"Howto\"")}
	}
	if v, ok := dc.mutation.Howto(); ok {
		if err := drug.HowtoValidator(v); err != nil {
			return nil, &ValidationError{Name: "Howto", err: fmt.Errorf("ent: validator failed for field \"Howto\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Property(); !ok {
		return nil, &ValidationError{Name: "Property", err: errors.New("ent: missing required field \"Property\"")}
	}
	if v, ok := dc.mutation.Property(); ok {
		if err := drug.PropertyValidator(v); err != nil {
			return nil, &ValidationError{Name: "Property", err: fmt.Errorf("ent: validator failed for field \"Property\": %w", err)}
		}
	}
	var (
		err  error
		node *Drug
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DrugMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DrugCreate) SaveX(ctx context.Context) *Drug {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DrugCreate) sqlSave(ctx context.Context) (*Drug, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DrugCreate) createSpec() (*Drug, *sqlgraph.CreateSpec) {
	var (
		d     = &Drug{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: drug.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: drug.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.DrugName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldDrugName,
		})
		d.DrugName = value
	}
	if value, ok := dc.mutation.Howto(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldHowto,
		})
		d.Howto = value
	}
	if value, ok := dc.mutation.Property(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: drug.FieldProperty,
		})
		d.Property = value
	}
	if nodes := dc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.EmployeeTable,
			Columns: []string{drug.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DrugtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DrugtypeTable,
			Columns: []string{drug.DrugtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drugtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drug.DiseaseTable,
			Columns: []string{drug.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
