// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/bloodtype"
	"github.com/B6001186/Contagions/ent/category"
	"github.com/B6001186/Contagions/ent/department"
	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/diseasetype"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/drugtype"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/gender"
	"github.com/B6001186/Contagions/ent/level"
	"github.com/B6001186/Contagions/ent/nametitle"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/B6001186/Contagions/ent/place"
	"github.com/B6001186/Contagions/ent/severity"
	"github.com/B6001186/Contagions/ent/statistic"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArea        = "Area"
	TypeBloodtype   = "Bloodtype"
	TypeCategory    = "Category"
	TypeDepartment  = "Department"
	TypeDiagnosis   = "Diagnosis"
	TypeDisease     = "Disease"
	TypeDiseasetype = "Diseasetype"
	TypeDrug        = "Drug"
	TypeDrugType    = "DrugType"
	TypeEmployee    = "Employee"
	TypeGender      = "Gender"
	TypeLevel       = "Level"
	TypeNametitle   = "Nametitle"
	TypePatient     = "Patient"
	TypePlace       = "Place"
	TypeSeverity    = "Severity"
	TypeStatistic   = "Statistic"
)

// AreaMutation represents an operation that mutate the Areas
// nodes in the graph.
type AreaMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_AreaName        *string
	_AreaDistrict    *string
	_AreaSubDistrict *string
	clearedFields    map[string]struct{}
	disease          *int
	cleareddisease   bool
	statistic        *int
	clearedstatistic bool
	level            *int
	clearedlevel     bool
	employee         *int
	clearedemployee  bool
	done             bool
	oldValue         func(context.Context) (*Area, error)
}

var _ ent.Mutation = (*AreaMutation)(nil)

// areaOption allows to manage the mutation configuration using functional options.
type areaOption func(*AreaMutation)

// newAreaMutation creates new mutation for $n.Name.
func newAreaMutation(c config, op Op, opts ...areaOption) *AreaMutation {
	m := &AreaMutation{
		config:        c,
		op:            op,
		typ:           TypeArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAreaID sets the id field of the mutation.
func withAreaID(id int) areaOption {
	return func(m *AreaMutation) {
		var (
			err   error
			once  sync.Once
			value *Area
		)
		m.oldValue = func(ctx context.Context) (*Area, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Area.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArea sets the old Area of the mutation.
func withArea(node *Area) areaOption {
	return func(m *AreaMutation) {
		m.oldValue = func(context.Context) (*Area, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AreaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAreaName sets the AreaName field.
func (m *AreaMutation) SetAreaName(s string) {
	m._AreaName = &s
}

// AreaName returns the AreaName value in the mutation.
func (m *AreaMutation) AreaName() (r string, exists bool) {
	v := m._AreaName
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaName returns the old AreaName value of the Area.
// If the Area object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AreaMutation) OldAreaName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAreaName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAreaName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaName: %w", err)
	}
	return oldValue.AreaName, nil
}

// ResetAreaName reset all changes of the "AreaName" field.
func (m *AreaMutation) ResetAreaName() {
	m._AreaName = nil
}

// SetAreaDistrict sets the AreaDistrict field.
func (m *AreaMutation) SetAreaDistrict(s string) {
	m._AreaDistrict = &s
}

// AreaDistrict returns the AreaDistrict value in the mutation.
func (m *AreaMutation) AreaDistrict() (r string, exists bool) {
	v := m._AreaDistrict
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaDistrict returns the old AreaDistrict value of the Area.
// If the Area object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AreaMutation) OldAreaDistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAreaDistrict is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAreaDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaDistrict: %w", err)
	}
	return oldValue.AreaDistrict, nil
}

// ResetAreaDistrict reset all changes of the "AreaDistrict" field.
func (m *AreaMutation) ResetAreaDistrict() {
	m._AreaDistrict = nil
}

// SetAreaSubDistrict sets the AreaSubDistrict field.
func (m *AreaMutation) SetAreaSubDistrict(s string) {
	m._AreaSubDistrict = &s
}

// AreaSubDistrict returns the AreaSubDistrict value in the mutation.
func (m *AreaMutation) AreaSubDistrict() (r string, exists bool) {
	v := m._AreaSubDistrict
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaSubDistrict returns the old AreaSubDistrict value of the Area.
// If the Area object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AreaMutation) OldAreaSubDistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAreaSubDistrict is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAreaSubDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaSubDistrict: %w", err)
	}
	return oldValue.AreaSubDistrict, nil
}

// ResetAreaSubDistrict reset all changes of the "AreaSubDistrict" field.
func (m *AreaMutation) ResetAreaSubDistrict() {
	m._AreaSubDistrict = nil
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *AreaMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *AreaMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *AreaMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *AreaMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *AreaMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// SetStatisticID sets the statistic edge to Statistic by id.
func (m *AreaMutation) SetStatisticID(id int) {
	m.statistic = &id
}

// ClearStatistic clears the statistic edge to Statistic.
func (m *AreaMutation) ClearStatistic() {
	m.clearedstatistic = true
}

// StatisticCleared returns if the edge statistic was cleared.
func (m *AreaMutation) StatisticCleared() bool {
	return m.clearedstatistic
}

// StatisticID returns the statistic id in the mutation.
func (m *AreaMutation) StatisticID() (id int, exists bool) {
	if m.statistic != nil {
		return *m.statistic, true
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StatisticID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) StatisticIDs() (ids []int) {
	if id := m.statistic; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *AreaMutation) ResetStatistic() {
	m.statistic = nil
	m.clearedstatistic = false
}

// SetLevelID sets the level edge to Level by id.
func (m *AreaMutation) SetLevelID(id int) {
	m.level = &id
}

// ClearLevel clears the level edge to Level.
func (m *AreaMutation) ClearLevel() {
	m.clearedlevel = true
}

// LevelCleared returns if the edge level was cleared.
func (m *AreaMutation) LevelCleared() bool {
	return m.clearedlevel
}

// LevelID returns the level id in the mutation.
func (m *AreaMutation) LevelID() (id int, exists bool) {
	if m.level != nil {
		return *m.level, true
	}
	return
}

// LevelIDs returns the level ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// LevelID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) LevelIDs() (ids []int) {
	if id := m.level; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLevel reset all changes of the "level" edge.
func (m *AreaMutation) ResetLevel() {
	m.level = nil
	m.clearedlevel = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *AreaMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *AreaMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *AreaMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *AreaMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *AreaMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *AreaMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Op returns the operation name.
func (m *AreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Area).
func (m *AreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AreaMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._AreaName != nil {
		fields = append(fields, area.FieldAreaName)
	}
	if m._AreaDistrict != nil {
		fields = append(fields, area.FieldAreaDistrict)
	}
	if m._AreaSubDistrict != nil {
		fields = append(fields, area.FieldAreaSubDistrict)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case area.FieldAreaName:
		return m.AreaName()
	case area.FieldAreaDistrict:
		return m.AreaDistrict()
	case area.FieldAreaSubDistrict:
		return m.AreaSubDistrict()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case area.FieldAreaName:
		return m.OldAreaName(ctx)
	case area.FieldAreaDistrict:
		return m.OldAreaDistrict(ctx)
	case area.FieldAreaSubDistrict:
		return m.OldAreaSubDistrict(ctx)
	}
	return nil, fmt.Errorf("unknown Area field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case area.FieldAreaName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaName(v)
		return nil
	case area.FieldAreaDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaDistrict(v)
		return nil
	case area.FieldAreaSubDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaSubDistrict(v)
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AreaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AreaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Area numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Area nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AreaMutation) ResetField(name string) error {
	switch name {
	case area.FieldAreaName:
		m.ResetAreaName()
		return nil
	case area.FieldAreaDistrict:
		m.ResetAreaDistrict()
		return nil
	case area.FieldAreaSubDistrict:
		m.ResetAreaSubDistrict()
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.disease != nil {
		edges = append(edges, area.EdgeDisease)
	}
	if m.statistic != nil {
		edges = append(edges, area.EdgeStatistic)
	}
	if m.level != nil {
		edges = append(edges, area.EdgeLevel)
	}
	if m.employee != nil {
		edges = append(edges, area.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AreaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case area.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeStatistic:
		if id := m.statistic; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeLevel:
		if id := m.level; id != nil {
			return []ent.Value{*id}
		}
	case area.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AreaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddisease {
		edges = append(edges, area.EdgeDisease)
	}
	if m.clearedstatistic {
		edges = append(edges, area.EdgeStatistic)
	}
	if m.clearedlevel {
		edges = append(edges, area.EdgeLevel)
	}
	if m.clearedemployee {
		edges = append(edges, area.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AreaMutation) EdgeCleared(name string) bool {
	switch name {
	case area.EdgeDisease:
		return m.cleareddisease
	case area.EdgeStatistic:
		return m.clearedstatistic
	case area.EdgeLevel:
		return m.clearedlevel
	case area.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AreaMutation) ClearEdge(name string) error {
	switch name {
	case area.EdgeDisease:
		m.ClearDisease()
		return nil
	case area.EdgeStatistic:
		m.ClearStatistic()
		return nil
	case area.EdgeLevel:
		m.ClearLevel()
		return nil
	case area.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Area unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AreaMutation) ResetEdge(name string) error {
	switch name {
	case area.EdgeDisease:
		m.ResetDisease()
		return nil
	case area.EdgeStatistic:
		m.ResetStatistic()
		return nil
	case area.EdgeLevel:
		m.ResetLevel()
		return nil
	case area.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Area edge %s", name)
}

// BloodtypeMutation represents an operation that mutate the Bloodtypes
// nodes in the graph.
type BloodtypeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_BloodtypeName *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Bloodtype, error)
}

var _ ent.Mutation = (*BloodtypeMutation)(nil)

// bloodtypeOption allows to manage the mutation configuration using functional options.
type bloodtypeOption func(*BloodtypeMutation)

// newBloodtypeMutation creates new mutation for $n.Name.
func newBloodtypeMutation(c config, op Op, opts ...bloodtypeOption) *BloodtypeMutation {
	m := &BloodtypeMutation{
		config:        c,
		op:            op,
		typ:           TypeBloodtype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBloodtypeID sets the id field of the mutation.
func withBloodtypeID(id int) bloodtypeOption {
	return func(m *BloodtypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Bloodtype
		)
		m.oldValue = func(ctx context.Context) (*Bloodtype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bloodtype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBloodtype sets the old Bloodtype of the mutation.
func withBloodtype(node *Bloodtype) bloodtypeOption {
	return func(m *BloodtypeMutation) {
		m.oldValue = func(context.Context) (*Bloodtype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BloodtypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BloodtypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BloodtypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBloodtypeName sets the BloodtypeName field.
func (m *BloodtypeMutation) SetBloodtypeName(s string) {
	m._BloodtypeName = &s
}

// BloodtypeName returns the BloodtypeName value in the mutation.
func (m *BloodtypeMutation) BloodtypeName() (r string, exists bool) {
	v := m._BloodtypeName
	if v == nil {
		return
	}
	return *v, true
}

// OldBloodtypeName returns the old BloodtypeName value of the Bloodtype.
// If the Bloodtype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BloodtypeMutation) OldBloodtypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBloodtypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBloodtypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBloodtypeName: %w", err)
	}
	return oldValue.BloodtypeName, nil
}

// ResetBloodtypeName reset all changes of the "BloodtypeName" field.
func (m *BloodtypeMutation) ResetBloodtypeName() {
	m._BloodtypeName = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *BloodtypeMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *BloodtypeMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *BloodtypeMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *BloodtypeMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *BloodtypeMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *BloodtypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bloodtype).
func (m *BloodtypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BloodtypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._BloodtypeName != nil {
		fields = append(fields, bloodtype.FieldBloodtypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BloodtypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bloodtype.FieldBloodtypeName:
		return m.BloodtypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BloodtypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bloodtype.FieldBloodtypeName:
		return m.OldBloodtypeName(ctx)
	}
	return nil, fmt.Errorf("unknown Bloodtype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BloodtypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bloodtype.FieldBloodtypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBloodtypeName(v)
		return nil
	}
	return fmt.Errorf("unknown Bloodtype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BloodtypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BloodtypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BloodtypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bloodtype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BloodtypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BloodtypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BloodtypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bloodtype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BloodtypeMutation) ResetField(name string) error {
	switch name {
	case bloodtype.FieldBloodtypeName:
		m.ResetBloodtypeName()
		return nil
	}
	return fmt.Errorf("unknown Bloodtype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BloodtypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, bloodtype.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BloodtypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bloodtype.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BloodtypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, bloodtype.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BloodtypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bloodtype.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BloodtypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BloodtypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BloodtypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bloodtype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BloodtypeMutation) ResetEdge(name string) error {
	switch name {
	case bloodtype.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Bloodtype edge %s", name)
}

// CategoryMutation represents an operation that mutate the Categories
// nodes in the graph.
type CategoryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_CategoryName  *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Category, error)
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows to manage the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for $n.Name.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the id field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCategoryName sets the CategoryName field.
func (m *CategoryMutation) SetCategoryName(s string) {
	m._CategoryName = &s
}

// CategoryName returns the CategoryName value in the mutation.
func (m *CategoryMutation) CategoryName() (r string, exists bool) {
	v := m._CategoryName
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryName returns the old CategoryName value of the Category.
// If the Category object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CategoryMutation) OldCategoryName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCategoryName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCategoryName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryName: %w", err)
	}
	return oldValue.CategoryName, nil
}

// ResetCategoryName reset all changes of the "CategoryName" field.
func (m *CategoryMutation) ResetCategoryName() {
	m._CategoryName = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *CategoryMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *CategoryMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *CategoryMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *CategoryMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *CategoryMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._CategoryName != nil {
		fields = append(fields, category.FieldCategoryName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldCategoryName:
		return m.CategoryName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldCategoryName:
		return m.OldCategoryName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldCategoryName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldCategoryName:
		m.ResetCategoryName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, category.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, category.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_DepartmentName *string
	clearedFields   map[string]struct{}
	employee        map[int]struct{}
	removedemployee map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentName sets the DepartmentName field.
func (m *DepartmentMutation) SetDepartmentName(s string) {
	m._DepartmentName = &s
}

// DepartmentName returns the DepartmentName value in the mutation.
func (m *DepartmentMutation) DepartmentName() (r string, exists bool) {
	v := m._DepartmentName
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentName returns the old DepartmentName value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentName: %w", err)
	}
	return oldValue.DepartmentName, nil
}

// ResetDepartmentName reset all changes of the "DepartmentName" field.
func (m *DepartmentMutation) ResetDepartmentName() {
	m._DepartmentName = nil
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (m *DepartmentMutation) AddEmployeeIDs(ids ...int) {
	if m.employee == nil {
		m.employee = make(map[int]struct{})
	}
	for i := range ids {
		m.employee[ids[i]] = struct{}{}
	}
}

// RemoveEmployeeIDs removes the employee edge to Employee by ids.
func (m *DepartmentMutation) RemoveEmployeeIDs(ids ...int) {
	if m.removedemployee == nil {
		m.removedemployee = make(map[int]struct{})
	}
	for i := range ids {
		m.removedemployee[ids[i]] = struct{}{}
	}
}

// RemovedEmployee returns the removed ids of employee.
func (m *DepartmentMutation) RemovedEmployeeIDs() (ids []int) {
	for id := range m.removedemployee {
		ids = append(ids, id)
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
func (m *DepartmentMutation) EmployeeIDs() (ids []int) {
	for id := range m.employee {
		ids = append(ids, id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *DepartmentMutation) ResetEmployee() {
	m.employee = nil
	m.removedemployee = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._DepartmentName != nil {
		fields = append(fields, department.FieldDepartmentName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentName:
		return m.DepartmentName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentName:
		return m.OldDepartmentName(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentName(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentName:
		m.ResetDepartmentName()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.employee != nil {
		edges = append(edges, department.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.employee))
		for id := range m.employee {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedemployee != nil {
		edges = append(edges, department.EdgeEmployee)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.removedemployee))
		for id := range m.removedemployee {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// DiagnosisMutation represents an operation that mutate the Diagnoses
// nodes in the graph.
type DiagnosisMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_DiagnosticMessages *string
	_SurveillancePeriod *string
	_Treatment          *string
	_DiagnosisDate      *time.Time
	clearedFields       map[string]struct{}
	disease             *int
	cleareddisease      bool
	patient             *int
	clearedpatient      bool
	employee            *int
	clearedemployee     bool
	done                bool
	oldValue            func(context.Context) (*Diagnosis, error)
}

var _ ent.Mutation = (*DiagnosisMutation)(nil)

// diagnosisOption allows to manage the mutation configuration using functional options.
type diagnosisOption func(*DiagnosisMutation)

// newDiagnosisMutation creates new mutation for $n.Name.
func newDiagnosisMutation(c config, op Op, opts ...diagnosisOption) *DiagnosisMutation {
	m := &DiagnosisMutation{
		config:        c,
		op:            op,
		typ:           TypeDiagnosis,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiagnosisID sets the id field of the mutation.
func withDiagnosisID(id int) diagnosisOption {
	return func(m *DiagnosisMutation) {
		var (
			err   error
			once  sync.Once
			value *Diagnosis
		)
		m.oldValue = func(ctx context.Context) (*Diagnosis, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Diagnosis.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiagnosis sets the old Diagnosis of the mutation.
func withDiagnosis(node *Diagnosis) diagnosisOption {
	return func(m *DiagnosisMutation) {
		m.oldValue = func(context.Context) (*Diagnosis, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiagnosisMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiagnosisMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiagnosisMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiagnosticMessages sets the DiagnosticMessages field.
func (m *DiagnosisMutation) SetDiagnosticMessages(s string) {
	m._DiagnosticMessages = &s
}

// DiagnosticMessages returns the DiagnosticMessages value in the mutation.
func (m *DiagnosisMutation) DiagnosticMessages() (r string, exists bool) {
	v := m._DiagnosticMessages
	if v == nil {
		return
	}
	return *v, true
}

// OldDiagnosticMessages returns the old DiagnosticMessages value of the Diagnosis.
// If the Diagnosis object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiagnosisMutation) OldDiagnosticMessages(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiagnosticMessages is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiagnosticMessages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiagnosticMessages: %w", err)
	}
	return oldValue.DiagnosticMessages, nil
}

// ResetDiagnosticMessages reset all changes of the "DiagnosticMessages" field.
func (m *DiagnosisMutation) ResetDiagnosticMessages() {
	m._DiagnosticMessages = nil
}

// SetSurveillancePeriod sets the SurveillancePeriod field.
func (m *DiagnosisMutation) SetSurveillancePeriod(s string) {
	m._SurveillancePeriod = &s
}

// SurveillancePeriod returns the SurveillancePeriod value in the mutation.
func (m *DiagnosisMutation) SurveillancePeriod() (r string, exists bool) {
	v := m._SurveillancePeriod
	if v == nil {
		return
	}
	return *v, true
}

// OldSurveillancePeriod returns the old SurveillancePeriod value of the Diagnosis.
// If the Diagnosis object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiagnosisMutation) OldSurveillancePeriod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSurveillancePeriod is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSurveillancePeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurveillancePeriod: %w", err)
	}
	return oldValue.SurveillancePeriod, nil
}

// ResetSurveillancePeriod reset all changes of the "SurveillancePeriod" field.
func (m *DiagnosisMutation) ResetSurveillancePeriod() {
	m._SurveillancePeriod = nil
}

// SetTreatment sets the Treatment field.
func (m *DiagnosisMutation) SetTreatment(s string) {
	m._Treatment = &s
}

// Treatment returns the Treatment value in the mutation.
func (m *DiagnosisMutation) Treatment() (r string, exists bool) {
	v := m._Treatment
	if v == nil {
		return
	}
	return *v, true
}

// OldTreatment returns the old Treatment value of the Diagnosis.
// If the Diagnosis object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiagnosisMutation) OldTreatment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTreatment is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTreatment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreatment: %w", err)
	}
	return oldValue.Treatment, nil
}

// ResetTreatment reset all changes of the "Treatment" field.
func (m *DiagnosisMutation) ResetTreatment() {
	m._Treatment = nil
}

// SetDiagnosisDate sets the DiagnosisDate field.
func (m *DiagnosisMutation) SetDiagnosisDate(t time.Time) {
	m._DiagnosisDate = &t
}

// DiagnosisDate returns the DiagnosisDate value in the mutation.
func (m *DiagnosisMutation) DiagnosisDate() (r time.Time, exists bool) {
	v := m._DiagnosisDate
	if v == nil {
		return
	}
	return *v, true
}

// OldDiagnosisDate returns the old DiagnosisDate value of the Diagnosis.
// If the Diagnosis object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiagnosisMutation) OldDiagnosisDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiagnosisDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiagnosisDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiagnosisDate: %w", err)
	}
	return oldValue.DiagnosisDate, nil
}

// ResetDiagnosisDate reset all changes of the "DiagnosisDate" field.
func (m *DiagnosisMutation) ResetDiagnosisDate() {
	m._DiagnosisDate = nil
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *DiagnosisMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *DiagnosisMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *DiagnosisMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *DiagnosisMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *DiagnosisMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *DiagnosisMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DiagnosisMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DiagnosisMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DiagnosisMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DiagnosisMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DiagnosisMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DiagnosisMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *DiagnosisMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *DiagnosisMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *DiagnosisMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *DiagnosisMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *DiagnosisMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *DiagnosisMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Op returns the operation name.
func (m *DiagnosisMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Diagnosis).
func (m *DiagnosisMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiagnosisMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._DiagnosticMessages != nil {
		fields = append(fields, diagnosis.FieldDiagnosticMessages)
	}
	if m._SurveillancePeriod != nil {
		fields = append(fields, diagnosis.FieldSurveillancePeriod)
	}
	if m._Treatment != nil {
		fields = append(fields, diagnosis.FieldTreatment)
	}
	if m._DiagnosisDate != nil {
		fields = append(fields, diagnosis.FieldDiagnosisDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiagnosisMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case diagnosis.FieldDiagnosticMessages:
		return m.DiagnosticMessages()
	case diagnosis.FieldSurveillancePeriod:
		return m.SurveillancePeriod()
	case diagnosis.FieldTreatment:
		return m.Treatment()
	case diagnosis.FieldDiagnosisDate:
		return m.DiagnosisDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiagnosisMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case diagnosis.FieldDiagnosticMessages:
		return m.OldDiagnosticMessages(ctx)
	case diagnosis.FieldSurveillancePeriod:
		return m.OldSurveillancePeriod(ctx)
	case diagnosis.FieldTreatment:
		return m.OldTreatment(ctx)
	case diagnosis.FieldDiagnosisDate:
		return m.OldDiagnosisDate(ctx)
	}
	return nil, fmt.Errorf("unknown Diagnosis field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnosisMutation) SetField(name string, value ent.Value) error {
	switch name {
	case diagnosis.FieldDiagnosticMessages:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiagnosticMessages(v)
		return nil
	case diagnosis.FieldSurveillancePeriod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurveillancePeriod(v)
		return nil
	case diagnosis.FieldTreatment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreatment(v)
		return nil
	case diagnosis.FieldDiagnosisDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiagnosisDate(v)
		return nil
	}
	return fmt.Errorf("unknown Diagnosis field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiagnosisMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiagnosisMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiagnosisMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Diagnosis numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiagnosisMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiagnosisMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiagnosisMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Diagnosis nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiagnosisMutation) ResetField(name string) error {
	switch name {
	case diagnosis.FieldDiagnosticMessages:
		m.ResetDiagnosticMessages()
		return nil
	case diagnosis.FieldSurveillancePeriod:
		m.ResetSurveillancePeriod()
		return nil
	case diagnosis.FieldTreatment:
		m.ResetTreatment()
		return nil
	case diagnosis.FieldDiagnosisDate:
		m.ResetDiagnosisDate()
		return nil
	}
	return fmt.Errorf("unknown Diagnosis field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiagnosisMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.disease != nil {
		edges = append(edges, diagnosis.EdgeDisease)
	}
	if m.patient != nil {
		edges = append(edges, diagnosis.EdgePatient)
	}
	if m.employee != nil {
		edges = append(edges, diagnosis.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiagnosisMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diagnosis.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	case diagnosis.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case diagnosis.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiagnosisMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiagnosisMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiagnosisMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddisease {
		edges = append(edges, diagnosis.EdgeDisease)
	}
	if m.clearedpatient {
		edges = append(edges, diagnosis.EdgePatient)
	}
	if m.clearedemployee {
		edges = append(edges, diagnosis.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiagnosisMutation) EdgeCleared(name string) bool {
	switch name {
	case diagnosis.EdgeDisease:
		return m.cleareddisease
	case diagnosis.EdgePatient:
		return m.clearedpatient
	case diagnosis.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiagnosisMutation) ClearEdge(name string) error {
	switch name {
	case diagnosis.EdgeDisease:
		m.ClearDisease()
		return nil
	case diagnosis.EdgePatient:
		m.ClearPatient()
		return nil
	case diagnosis.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Diagnosis unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiagnosisMutation) ResetEdge(name string) error {
	switch name {
	case diagnosis.EdgeDisease:
		m.ResetDisease()
		return nil
	case diagnosis.EdgePatient:
		m.ResetPatient()
		return nil
	case diagnosis.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Diagnosis edge %s", name)
}

// DiseaseMutation represents an operation that mutate the Diseases
// nodes in the graph.
type DiseaseMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_DiseaseName       *string
	_Symptom           *string
	_Contagion         *string
	clearedFields      map[string]struct{}
	employee           *int
	clearedemployee    bool
	severity           *int
	clearedseverity    bool
	diseasetype        *int
	cleareddiseasetype bool
	area               map[int]struct{}
	removedarea        map[int]struct{}
	drug               map[int]struct{}
	removeddrug        map[int]struct{}
	diagnosis          map[int]struct{}
	removeddiagnosis   map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*Disease, error)
}

var _ ent.Mutation = (*DiseaseMutation)(nil)

// diseaseOption allows to manage the mutation configuration using functional options.
type diseaseOption func(*DiseaseMutation)

// newDiseaseMutation creates new mutation for $n.Name.
func newDiseaseMutation(c config, op Op, opts ...diseaseOption) *DiseaseMutation {
	m := &DiseaseMutation{
		config:        c,
		op:            op,
		typ:           TypeDisease,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseaseID sets the id field of the mutation.
func withDiseaseID(id int) diseaseOption {
	return func(m *DiseaseMutation) {
		var (
			err   error
			once  sync.Once
			value *Disease
		)
		m.oldValue = func(ctx context.Context) (*Disease, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Disease.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDisease sets the old Disease of the mutation.
func withDisease(node *Disease) diseaseOption {
	return func(m *DiseaseMutation) {
		m.oldValue = func(context.Context) (*Disease, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseaseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseaseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseaseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiseaseName sets the DiseaseName field.
func (m *DiseaseMutation) SetDiseaseName(s string) {
	m._DiseaseName = &s
}

// DiseaseName returns the DiseaseName value in the mutation.
func (m *DiseaseMutation) DiseaseName() (r string, exists bool) {
	v := m._DiseaseName
	if v == nil {
		return
	}
	return *v, true
}

// OldDiseaseName returns the old DiseaseName value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldDiseaseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiseaseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiseaseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiseaseName: %w", err)
	}
	return oldValue.DiseaseName, nil
}

// ResetDiseaseName reset all changes of the "DiseaseName" field.
func (m *DiseaseMutation) ResetDiseaseName() {
	m._DiseaseName = nil
}

// SetSymptom sets the Symptom field.
func (m *DiseaseMutation) SetSymptom(s string) {
	m._Symptom = &s
}

// Symptom returns the Symptom value in the mutation.
func (m *DiseaseMutation) Symptom() (r string, exists bool) {
	v := m._Symptom
	if v == nil {
		return
	}
	return *v, true
}

// OldSymptom returns the old Symptom value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldSymptom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSymptom is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSymptom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymptom: %w", err)
	}
	return oldValue.Symptom, nil
}

// ResetSymptom reset all changes of the "Symptom" field.
func (m *DiseaseMutation) ResetSymptom() {
	m._Symptom = nil
}

// SetContagion sets the Contagion field.
func (m *DiseaseMutation) SetContagion(s string) {
	m._Contagion = &s
}

// Contagion returns the Contagion value in the mutation.
func (m *DiseaseMutation) Contagion() (r string, exists bool) {
	v := m._Contagion
	if v == nil {
		return
	}
	return *v, true
}

// OldContagion returns the old Contagion value of the Disease.
// If the Disease object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseaseMutation) OldContagion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContagion is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContagion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContagion: %w", err)
	}
	return oldValue.Contagion, nil
}

// ResetContagion reset all changes of the "Contagion" field.
func (m *DiseaseMutation) ResetContagion() {
	m._Contagion = nil
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *DiseaseMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *DiseaseMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *DiseaseMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *DiseaseMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *DiseaseMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *DiseaseMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetSeverityID sets the severity edge to Severity by id.
func (m *DiseaseMutation) SetSeverityID(id int) {
	m.severity = &id
}

// ClearSeverity clears the severity edge to Severity.
func (m *DiseaseMutation) ClearSeverity() {
	m.clearedseverity = true
}

// SeverityCleared returns if the edge severity was cleared.
func (m *DiseaseMutation) SeverityCleared() bool {
	return m.clearedseverity
}

// SeverityID returns the severity id in the mutation.
func (m *DiseaseMutation) SeverityID() (id int, exists bool) {
	if m.severity != nil {
		return *m.severity, true
	}
	return
}

// SeverityIDs returns the severity ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SeverityID instead. It exists only for internal usage by the builders.
func (m *DiseaseMutation) SeverityIDs() (ids []int) {
	if id := m.severity; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSeverity reset all changes of the "severity" edge.
func (m *DiseaseMutation) ResetSeverity() {
	m.severity = nil
	m.clearedseverity = false
}

// SetDiseasetypeID sets the diseasetype edge to Diseasetype by id.
func (m *DiseaseMutation) SetDiseasetypeID(id int) {
	m.diseasetype = &id
}

// ClearDiseasetype clears the diseasetype edge to Diseasetype.
func (m *DiseaseMutation) ClearDiseasetype() {
	m.cleareddiseasetype = true
}

// DiseasetypeCleared returns if the edge diseasetype was cleared.
func (m *DiseaseMutation) DiseasetypeCleared() bool {
	return m.cleareddiseasetype
}

// DiseasetypeID returns the diseasetype id in the mutation.
func (m *DiseaseMutation) DiseasetypeID() (id int, exists bool) {
	if m.diseasetype != nil {
		return *m.diseasetype, true
	}
	return
}

// DiseasetypeIDs returns the diseasetype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseasetypeID instead. It exists only for internal usage by the builders.
func (m *DiseaseMutation) DiseasetypeIDs() (ids []int) {
	if id := m.diseasetype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDiseasetype reset all changes of the "diseasetype" edge.
func (m *DiseaseMutation) ResetDiseasetype() {
	m.diseasetype = nil
	m.cleareddiseasetype = false
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *DiseaseMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *DiseaseMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *DiseaseMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *DiseaseMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *DiseaseMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (m *DiseaseMutation) AddDrugIDs(ids ...int) {
	if m.drug == nil {
		m.drug = make(map[int]struct{})
	}
	for i := range ids {
		m.drug[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (m *DiseaseMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrug == nil {
		m.removeddrug = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrug[ids[i]] = struct{}{}
	}
}

// RemovedDrug returns the removed ids of drug.
func (m *DiseaseMutation) RemovedDrugIDs() (ids []int) {
	for id := range m.removeddrug {
		ids = append(ids, id)
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
func (m *DiseaseMutation) DrugIDs() (ids []int) {
	for id := range m.drug {
		ids = append(ids, id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *DiseaseMutation) ResetDrug() {
	m.drug = nil
	m.removeddrug = nil
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (m *DiseaseMutation) AddDiagnosiIDs(ids ...int) {
	if m.diagnosis == nil {
		m.diagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.diagnosis[ids[i]] = struct{}{}
	}
}

// RemoveDiagnosiIDs removes the diagnosis edge to Diagnosis by ids.
func (m *DiseaseMutation) RemoveDiagnosiIDs(ids ...int) {
	if m.removeddiagnosis == nil {
		m.removeddiagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddiagnosis[ids[i]] = struct{}{}
	}
}

// RemovedDiagnosis returns the removed ids of diagnosis.
func (m *DiseaseMutation) RemovedDiagnosisIDs() (ids []int) {
	for id := range m.removeddiagnosis {
		ids = append(ids, id)
	}
	return
}

// DiagnosisIDs returns the diagnosis ids in the mutation.
func (m *DiseaseMutation) DiagnosisIDs() (ids []int) {
	for id := range m.diagnosis {
		ids = append(ids, id)
	}
	return
}

// ResetDiagnosis reset all changes of the "diagnosis" edge.
func (m *DiseaseMutation) ResetDiagnosis() {
	m.diagnosis = nil
	m.removeddiagnosis = nil
}

// Op returns the operation name.
func (m *DiseaseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Disease).
func (m *DiseaseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseaseMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._DiseaseName != nil {
		fields = append(fields, disease.FieldDiseaseName)
	}
	if m._Symptom != nil {
		fields = append(fields, disease.FieldSymptom)
	}
	if m._Contagion != nil {
		fields = append(fields, disease.FieldContagion)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseaseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case disease.FieldDiseaseName:
		return m.DiseaseName()
	case disease.FieldSymptom:
		return m.Symptom()
	case disease.FieldContagion:
		return m.Contagion()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseaseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case disease.FieldDiseaseName:
		return m.OldDiseaseName(ctx)
	case disease.FieldSymptom:
		return m.OldSymptom(ctx)
	case disease.FieldContagion:
		return m.OldContagion(ctx)
	}
	return nil, fmt.Errorf("unknown Disease field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case disease.FieldDiseaseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiseaseName(v)
		return nil
	case disease.FieldSymptom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymptom(v)
		return nil
	case disease.FieldContagion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContagion(v)
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseaseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseaseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseaseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Disease numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseaseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseaseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseaseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Disease nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseaseMutation) ResetField(name string) error {
	switch name {
	case disease.FieldDiseaseName:
		m.ResetDiseaseName()
		return nil
	case disease.FieldSymptom:
		m.ResetSymptom()
		return nil
	case disease.FieldContagion:
		m.ResetContagion()
		return nil
	}
	return fmt.Errorf("unknown Disease field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseaseMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.employee != nil {
		edges = append(edges, disease.EdgeEmployee)
	}
	if m.severity != nil {
		edges = append(edges, disease.EdgeSeverity)
	}
	if m.diseasetype != nil {
		edges = append(edges, disease.EdgeDiseasetype)
	}
	if m.area != nil {
		edges = append(edges, disease.EdgeArea)
	}
	if m.drug != nil {
		edges = append(edges, disease.EdgeDrug)
	}
	if m.diagnosis != nil {
		edges = append(edges, disease.EdgeDiagnosis)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseaseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case disease.EdgeSeverity:
		if id := m.severity; id != nil {
			return []ent.Value{*id}
		}
	case disease.EdgeDiseasetype:
		if id := m.diseasetype; id != nil {
			return []ent.Value{*id}
		}
	case disease.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.drug))
		for id := range m.drug {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.diagnosis))
		for id := range m.diagnosis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseaseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedarea != nil {
		edges = append(edges, disease.EdgeArea)
	}
	if m.removeddrug != nil {
		edges = append(edges, disease.EdgeDrug)
	}
	if m.removeddiagnosis != nil {
		edges = append(edges, disease.EdgeDiagnosis)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseaseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case disease.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.removeddrug))
		for id := range m.removeddrug {
			ids = append(ids, id)
		}
		return ids
	case disease.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.removeddiagnosis))
		for id := range m.removeddiagnosis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseaseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedemployee {
		edges = append(edges, disease.EdgeEmployee)
	}
	if m.clearedseverity {
		edges = append(edges, disease.EdgeSeverity)
	}
	if m.cleareddiseasetype {
		edges = append(edges, disease.EdgeDiseasetype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseaseMutation) EdgeCleared(name string) bool {
	switch name {
	case disease.EdgeEmployee:
		return m.clearedemployee
	case disease.EdgeSeverity:
		return m.clearedseverity
	case disease.EdgeDiseasetype:
		return m.cleareddiseasetype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseaseMutation) ClearEdge(name string) error {
	switch name {
	case disease.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case disease.EdgeSeverity:
		m.ClearSeverity()
		return nil
	case disease.EdgeDiseasetype:
		m.ClearDiseasetype()
		return nil
	}
	return fmt.Errorf("unknown Disease unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseaseMutation) ResetEdge(name string) error {
	switch name {
	case disease.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case disease.EdgeSeverity:
		m.ResetSeverity()
		return nil
	case disease.EdgeDiseasetype:
		m.ResetDiseasetype()
		return nil
	case disease.EdgeArea:
		m.ResetArea()
		return nil
	case disease.EdgeDrug:
		m.ResetDrug()
		return nil
	case disease.EdgeDiagnosis:
		m.ResetDiagnosis()
		return nil
	}
	return fmt.Errorf("unknown Disease edge %s", name)
}

// DiseasetypeMutation represents an operation that mutate the Diseasetypes
// nodes in the graph.
type DiseasetypeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_DiseaseTypeName *string
	clearedFields    map[string]struct{}
	disease          map[int]struct{}
	removeddisease   map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Diseasetype, error)
}

var _ ent.Mutation = (*DiseasetypeMutation)(nil)

// diseasetypeOption allows to manage the mutation configuration using functional options.
type diseasetypeOption func(*DiseasetypeMutation)

// newDiseasetypeMutation creates new mutation for $n.Name.
func newDiseasetypeMutation(c config, op Op, opts ...diseasetypeOption) *DiseasetypeMutation {
	m := &DiseasetypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDiseasetype,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDiseasetypeID sets the id field of the mutation.
func withDiseasetypeID(id int) diseasetypeOption {
	return func(m *DiseasetypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Diseasetype
		)
		m.oldValue = func(ctx context.Context) (*Diseasetype, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Diseasetype.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDiseasetype sets the old Diseasetype of the mutation.
func withDiseasetype(node *Diseasetype) diseasetypeOption {
	return func(m *DiseasetypeMutation) {
		m.oldValue = func(context.Context) (*Diseasetype, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DiseasetypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DiseasetypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DiseasetypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDiseaseTypeName sets the DiseaseTypeName field.
func (m *DiseasetypeMutation) SetDiseaseTypeName(s string) {
	m._DiseaseTypeName = &s
}

// DiseaseTypeName returns the DiseaseTypeName value in the mutation.
func (m *DiseasetypeMutation) DiseaseTypeName() (r string, exists bool) {
	v := m._DiseaseTypeName
	if v == nil {
		return
	}
	return *v, true
}

// OldDiseaseTypeName returns the old DiseaseTypeName value of the Diseasetype.
// If the Diseasetype object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DiseasetypeMutation) OldDiseaseTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDiseaseTypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDiseaseTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiseaseTypeName: %w", err)
	}
	return oldValue.DiseaseTypeName, nil
}

// ResetDiseaseTypeName reset all changes of the "DiseaseTypeName" field.
func (m *DiseasetypeMutation) ResetDiseaseTypeName() {
	m._DiseaseTypeName = nil
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (m *DiseasetypeMutation) AddDiseaseIDs(ids ...int) {
	if m.disease == nil {
		m.disease = make(map[int]struct{})
	}
	for i := range ids {
		m.disease[ids[i]] = struct{}{}
	}
}

// RemoveDiseaseIDs removes the disease edge to Disease by ids.
func (m *DiseasetypeMutation) RemoveDiseaseIDs(ids ...int) {
	if m.removeddisease == nil {
		m.removeddisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddisease[ids[i]] = struct{}{}
	}
}

// RemovedDisease returns the removed ids of disease.
func (m *DiseasetypeMutation) RemovedDiseaseIDs() (ids []int) {
	for id := range m.removeddisease {
		ids = append(ids, id)
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
func (m *DiseasetypeMutation) DiseaseIDs() (ids []int) {
	for id := range m.disease {
		ids = append(ids, id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *DiseasetypeMutation) ResetDisease() {
	m.disease = nil
	m.removeddisease = nil
}

// Op returns the operation name.
func (m *DiseasetypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Diseasetype).
func (m *DiseasetypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DiseasetypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._DiseaseTypeName != nil {
		fields = append(fields, diseasetype.FieldDiseaseTypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DiseasetypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case diseasetype.FieldDiseaseTypeName:
		return m.DiseaseTypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DiseasetypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case diseasetype.FieldDiseaseTypeName:
		return m.OldDiseaseTypeName(ctx)
	}
	return nil, fmt.Errorf("unknown Diseasetype field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseasetypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case diseasetype.FieldDiseaseTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiseaseTypeName(v)
		return nil
	}
	return fmt.Errorf("unknown Diseasetype field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DiseasetypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DiseasetypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DiseasetypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Diseasetype numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DiseasetypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DiseasetypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DiseasetypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Diseasetype nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DiseasetypeMutation) ResetField(name string) error {
	switch name {
	case diseasetype.FieldDiseaseTypeName:
		m.ResetDiseaseTypeName()
		return nil
	}
	return fmt.Errorf("unknown Diseasetype field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DiseasetypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.disease != nil {
		edges = append(edges, diseasetype.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DiseasetypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case diseasetype.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.disease))
		for id := range m.disease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DiseasetypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddisease != nil {
		edges = append(edges, diseasetype.EdgeDisease)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DiseasetypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case diseasetype.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.removeddisease))
		for id := range m.removeddisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DiseasetypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DiseasetypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DiseasetypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Diseasetype unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DiseasetypeMutation) ResetEdge(name string) error {
	switch name {
	case diseasetype.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Diseasetype edge %s", name)
}

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_DrugName       *string
	_Howto          *string
	_Property       *string
	clearedFields   map[string]struct{}
	employee        *int
	clearedemployee bool
	drugtype        *int
	cleareddrugtype bool
	disease         *int
	cleareddisease  bool
	done            bool
	oldValue        func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDrugName sets the DrugName field.
func (m *DrugMutation) SetDrugName(s string) {
	m._DrugName = &s
}

// DrugName returns the DrugName value in the mutation.
func (m *DrugMutation) DrugName() (r string, exists bool) {
	v := m._DrugName
	if v == nil {
		return
	}
	return *v, true
}

// OldDrugName returns the old DrugName value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldDrugName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrugName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrugName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrugName: %w", err)
	}
	return oldValue.DrugName, nil
}

// ResetDrugName reset all changes of the "DrugName" field.
func (m *DrugMutation) ResetDrugName() {
	m._DrugName = nil
}

// SetHowto sets the Howto field.
func (m *DrugMutation) SetHowto(s string) {
	m._Howto = &s
}

// Howto returns the Howto value in the mutation.
func (m *DrugMutation) Howto() (r string, exists bool) {
	v := m._Howto
	if v == nil {
		return
	}
	return *v, true
}

// OldHowto returns the old Howto value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldHowto(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHowto is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHowto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHowto: %w", err)
	}
	return oldValue.Howto, nil
}

// ResetHowto reset all changes of the "Howto" field.
func (m *DrugMutation) ResetHowto() {
	m._Howto = nil
}

// SetProperty sets the Property field.
func (m *DrugMutation) SetProperty(s string) {
	m._Property = &s
}

// Property returns the Property value in the mutation.
func (m *DrugMutation) Property() (r string, exists bool) {
	v := m._Property
	if v == nil {
		return
	}
	return *v, true
}

// OldProperty returns the old Property value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldProperty(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProperty is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProperty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProperty: %w", err)
	}
	return oldValue.Property, nil
}

// ResetProperty reset all changes of the "Property" field.
func (m *DrugMutation) ResetProperty() {
	m._Property = nil
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *DrugMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *DrugMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *DrugMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *DrugMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *DrugMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetDrugtypeID sets the drugtype edge to DrugType by id.
func (m *DrugMutation) SetDrugtypeID(id int) {
	m.drugtype = &id
}

// ClearDrugtype clears the drugtype edge to DrugType.
func (m *DrugMutation) ClearDrugtype() {
	m.cleareddrugtype = true
}

// DrugtypeCleared returns if the edge drugtype was cleared.
func (m *DrugMutation) DrugtypeCleared() bool {
	return m.cleareddrugtype
}

// DrugtypeID returns the drugtype id in the mutation.
func (m *DrugMutation) DrugtypeID() (id int, exists bool) {
	if m.drugtype != nil {
		return *m.drugtype, true
	}
	return
}

// DrugtypeIDs returns the drugtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DrugtypeID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) DrugtypeIDs() (ids []int) {
	if id := m.drugtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDrugtype reset all changes of the "drugtype" edge.
func (m *DrugMutation) ResetDrugtype() {
	m.drugtype = nil
	m.cleareddrugtype = false
}

// SetDiseaseID sets the disease edge to Disease by id.
func (m *DrugMutation) SetDiseaseID(id int) {
	m.disease = &id
}

// ClearDisease clears the disease edge to Disease.
func (m *DrugMutation) ClearDisease() {
	m.cleareddisease = true
}

// DiseaseCleared returns if the edge disease was cleared.
func (m *DrugMutation) DiseaseCleared() bool {
	return m.cleareddisease
}

// DiseaseID returns the disease id in the mutation.
func (m *DrugMutation) DiseaseID() (id int, exists bool) {
	if m.disease != nil {
		return *m.disease, true
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DiseaseID instead. It exists only for internal usage by the builders.
func (m *DrugMutation) DiseaseIDs() (ids []int) {
	if id := m.disease; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *DrugMutation) ResetDisease() {
	m.disease = nil
	m.cleareddisease = false
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._DrugName != nil {
		fields = append(fields, drug.FieldDrugName)
	}
	if m._Howto != nil {
		fields = append(fields, drug.FieldHowto)
	}
	if m._Property != nil {
		fields = append(fields, drug.FieldProperty)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldDrugName:
		return m.DrugName()
	case drug.FieldHowto:
		return m.Howto()
	case drug.FieldProperty:
		return m.Property()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldDrugName:
		return m.OldDrugName(ctx)
	case drug.FieldHowto:
		return m.OldHowto(ctx)
	case drug.FieldProperty:
		return m.OldProperty(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldDrugName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrugName(v)
		return nil
	case drug.FieldHowto:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHowto(v)
		return nil
	case drug.FieldProperty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProperty(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldDrugName:
		m.ResetDrugName()
		return nil
	case drug.FieldHowto:
		m.ResetHowto()
		return nil
	case drug.FieldProperty:
		m.ResetProperty()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.employee != nil {
		edges = append(edges, drug.EdgeEmployee)
	}
	if m.drugtype != nil {
		edges = append(edges, drug.EdgeDrugtype)
	}
	if m.disease != nil {
		edges = append(edges, drug.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case drug.EdgeDrugtype:
		if id := m.drugtype; id != nil {
			return []ent.Value{*id}
		}
	case drug.EdgeDisease:
		if id := m.disease; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedemployee {
		edges = append(edges, drug.EdgeEmployee)
	}
	if m.cleareddrugtype {
		edges = append(edges, drug.EdgeDrugtype)
	}
	if m.cleareddisease {
		edges = append(edges, drug.EdgeDisease)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	case drug.EdgeEmployee:
		return m.clearedemployee
	case drug.EdgeDrugtype:
		return m.cleareddrugtype
	case drug.EdgeDisease:
		return m.cleareddisease
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	case drug.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case drug.EdgeDrugtype:
		m.ClearDrugtype()
		return nil
	case drug.EdgeDisease:
		m.ClearDisease()
		return nil
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case drug.EdgeDrugtype:
		m.ResetDrugtype()
		return nil
	case drug.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// DrugTypeMutation represents an operation that mutate the DrugTypes
// nodes in the graph.
type DrugTypeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_DrugTypeName *string
	clearedFields map[string]struct{}
	drug          map[int]struct{}
	removeddrug   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*DrugType, error)
}

var _ ent.Mutation = (*DrugTypeMutation)(nil)

// drugtypeOption allows to manage the mutation configuration using functional options.
type drugtypeOption func(*DrugTypeMutation)

// newDrugTypeMutation creates new mutation for $n.Name.
func newDrugTypeMutation(c config, op Op, opts ...drugtypeOption) *DrugTypeMutation {
	m := &DrugTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeDrugType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugTypeID sets the id field of the mutation.
func withDrugTypeID(id int) drugtypeOption {
	return func(m *DrugTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *DrugType
		)
		m.oldValue = func(ctx context.Context) (*DrugType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DrugType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrugType sets the old DrugType of the mutation.
func withDrugType(node *DrugType) drugtypeOption {
	return func(m *DrugTypeMutation) {
		m.oldValue = func(context.Context) (*DrugType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDrugTypeName sets the DrugTypeName field.
func (m *DrugTypeMutation) SetDrugTypeName(s string) {
	m._DrugTypeName = &s
}

// DrugTypeName returns the DrugTypeName value in the mutation.
func (m *DrugTypeMutation) DrugTypeName() (r string, exists bool) {
	v := m._DrugTypeName
	if v == nil {
		return
	}
	return *v, true
}

// OldDrugTypeName returns the old DrugTypeName value of the DrugType.
// If the DrugType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugTypeMutation) OldDrugTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrugTypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrugTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrugTypeName: %w", err)
	}
	return oldValue.DrugTypeName, nil
}

// ResetDrugTypeName reset all changes of the "DrugTypeName" field.
func (m *DrugTypeMutation) ResetDrugTypeName() {
	m._DrugTypeName = nil
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (m *DrugTypeMutation) AddDrugIDs(ids ...int) {
	if m.drug == nil {
		m.drug = make(map[int]struct{})
	}
	for i := range ids {
		m.drug[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (m *DrugTypeMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrug == nil {
		m.removeddrug = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrug[ids[i]] = struct{}{}
	}
}

// RemovedDrug returns the removed ids of drug.
func (m *DrugTypeMutation) RemovedDrugIDs() (ids []int) {
	for id := range m.removeddrug {
		ids = append(ids, id)
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
func (m *DrugTypeMutation) DrugIDs() (ids []int) {
	for id := range m.drug {
		ids = append(ids, id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *DrugTypeMutation) ResetDrug() {
	m.drug = nil
	m.removeddrug = nil
}

// Op returns the operation name.
func (m *DrugTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DrugType).
func (m *DrugTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._DrugTypeName != nil {
		fields = append(fields, drugtype.FieldDrugTypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drugtype.FieldDrugTypeName:
		return m.DrugTypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drugtype.FieldDrugTypeName:
		return m.OldDrugTypeName(ctx)
	}
	return nil, fmt.Errorf("unknown DrugType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drugtype.FieldDrugTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrugTypeName(v)
		return nil
	}
	return fmt.Errorf("unknown DrugType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DrugType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DrugType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugTypeMutation) ResetField(name string) error {
	switch name {
	case drugtype.FieldDrugTypeName:
		m.ResetDrugTypeName()
		return nil
	}
	return fmt.Errorf("unknown DrugType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drug != nil {
		edges = append(edges, drugtype.EdgeDrug)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drugtype.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.drug))
		for id := range m.drug {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrug != nil {
		edges = append(edges, drugtype.EdgeDrug)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case drugtype.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.removeddrug))
		for id := range m.removeddrug {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown DrugType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugTypeMutation) ResetEdge(name string) error {
	switch name {
	case drugtype.EdgeDrug:
		m.ResetDrug()
		return nil
	}
	return fmt.Errorf("unknown DrugType edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_UserId           *string
	_EmployeeName     *string
	_Tel              *string
	_BirthdayDate     *time.Time
	_Email            *string
	_Password         *string
	clearedFields     map[string]struct{}
	department        *int
	cleareddepartment bool
	place             *int
	clearedplace      bool
	nametitle         *int
	clearednametitle  bool
	area              map[int]struct{}
	removedarea       map[int]struct{}
	disease           map[int]struct{}
	removeddisease    map[int]struct{}
	drug              map[int]struct{}
	removeddrug       map[int]struct{}
	diagnosis         map[int]struct{}
	removeddiagnosis  map[int]struct{}
	patient           map[int]struct{}
	removedpatient    map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserId sets the UserId field.
func (m *EmployeeMutation) SetUserId(s string) {
	m._UserId = &s
}

// UserId returns the UserId value in the mutation.
func (m *EmployeeMutation) UserId() (r string, exists bool) {
	v := m._UserId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old UserId value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldUserId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserId is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId reset all changes of the "UserId" field.
func (m *EmployeeMutation) ResetUserId() {
	m._UserId = nil
}

// SetEmployeeName sets the EmployeeName field.
func (m *EmployeeMutation) SetEmployeeName(s string) {
	m._EmployeeName = &s
}

// EmployeeName returns the EmployeeName value in the mutation.
func (m *EmployeeMutation) EmployeeName() (r string, exists bool) {
	v := m._EmployeeName
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeName returns the old EmployeeName value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmployeeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmployeeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmployeeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeName: %w", err)
	}
	return oldValue.EmployeeName, nil
}

// ResetEmployeeName reset all changes of the "EmployeeName" field.
func (m *EmployeeMutation) ResetEmployeeName() {
	m._EmployeeName = nil
}

// SetTel sets the Tel field.
func (m *EmployeeMutation) SetTel(s string) {
	m._Tel = &s
}

// Tel returns the Tel value in the mutation.
func (m *EmployeeMutation) Tel() (r string, exists bool) {
	v := m._Tel
	if v == nil {
		return
	}
	return *v, true
}

// OldTel returns the old Tel value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTel: %w", err)
	}
	return oldValue.Tel, nil
}

// ResetTel reset all changes of the "Tel" field.
func (m *EmployeeMutation) ResetTel() {
	m._Tel = nil
}

// SetBirthdayDate sets the BirthdayDate field.
func (m *EmployeeMutation) SetBirthdayDate(t time.Time) {
	m._BirthdayDate = &t
}

// BirthdayDate returns the BirthdayDate value in the mutation.
func (m *EmployeeMutation) BirthdayDate() (r time.Time, exists bool) {
	v := m._BirthdayDate
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthdayDate returns the old BirthdayDate value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldBirthdayDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthdayDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthdayDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthdayDate: %w", err)
	}
	return oldValue.BirthdayDate, nil
}

// ResetBirthdayDate reset all changes of the "BirthdayDate" field.
func (m *EmployeeMutation) ResetBirthdayDate() {
	m._BirthdayDate = nil
}

// SetEmail sets the Email field.
func (m *EmployeeMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *EmployeeMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *EmployeeMutation) ResetEmail() {
	m._Email = nil
}

// SetPassword sets the Password field.
func (m *EmployeeMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *EmployeeMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *EmployeeMutation) ResetPassword() {
	m._Password = nil
}

// SetDepartmentID sets the department edge to Department by id.
func (m *EmployeeMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *EmployeeMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *EmployeeMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *EmployeeMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *EmployeeMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetPlaceID sets the place edge to Place by id.
func (m *EmployeeMutation) SetPlaceID(id int) {
	m.place = &id
}

// ClearPlace clears the place edge to Place.
func (m *EmployeeMutation) ClearPlace() {
	m.clearedplace = true
}

// PlaceCleared returns if the edge place was cleared.
func (m *EmployeeMutation) PlaceCleared() bool {
	return m.clearedplace
}

// PlaceID returns the place id in the mutation.
func (m *EmployeeMutation) PlaceID() (id int, exists bool) {
	if m.place != nil {
		return *m.place, true
	}
	return
}

// PlaceIDs returns the place ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PlaceID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) PlaceIDs() (ids []int) {
	if id := m.place; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlace reset all changes of the "place" edge.
func (m *EmployeeMutation) ResetPlace() {
	m.place = nil
	m.clearedplace = false
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (m *EmployeeMutation) SetNametitleID(id int) {
	m.nametitle = &id
}

// ClearNametitle clears the nametitle edge to Nametitle.
func (m *EmployeeMutation) ClearNametitle() {
	m.clearednametitle = true
}

// NametitleCleared returns if the edge nametitle was cleared.
func (m *EmployeeMutation) NametitleCleared() bool {
	return m.clearednametitle
}

// NametitleID returns the nametitle id in the mutation.
func (m *EmployeeMutation) NametitleID() (id int, exists bool) {
	if m.nametitle != nil {
		return *m.nametitle, true
	}
	return
}

// NametitleIDs returns the nametitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NametitleID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) NametitleIDs() (ids []int) {
	if id := m.nametitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNametitle reset all changes of the "nametitle" edge.
func (m *EmployeeMutation) ResetNametitle() {
	m.nametitle = nil
	m.clearednametitle = false
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *EmployeeMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *EmployeeMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *EmployeeMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *EmployeeMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *EmployeeMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (m *EmployeeMutation) AddDiseaseIDs(ids ...int) {
	if m.disease == nil {
		m.disease = make(map[int]struct{})
	}
	for i := range ids {
		m.disease[ids[i]] = struct{}{}
	}
}

// RemoveDiseaseIDs removes the disease edge to Disease by ids.
func (m *EmployeeMutation) RemoveDiseaseIDs(ids ...int) {
	if m.removeddisease == nil {
		m.removeddisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddisease[ids[i]] = struct{}{}
	}
}

// RemovedDisease returns the removed ids of disease.
func (m *EmployeeMutation) RemovedDiseaseIDs() (ids []int) {
	for id := range m.removeddisease {
		ids = append(ids, id)
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
func (m *EmployeeMutation) DiseaseIDs() (ids []int) {
	for id := range m.disease {
		ids = append(ids, id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *EmployeeMutation) ResetDisease() {
	m.disease = nil
	m.removeddisease = nil
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (m *EmployeeMutation) AddDrugIDs(ids ...int) {
	if m.drug == nil {
		m.drug = make(map[int]struct{})
	}
	for i := range ids {
		m.drug[ids[i]] = struct{}{}
	}
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (m *EmployeeMutation) RemoveDrugIDs(ids ...int) {
	if m.removeddrug == nil {
		m.removeddrug = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrug[ids[i]] = struct{}{}
	}
}

// RemovedDrug returns the removed ids of drug.
func (m *EmployeeMutation) RemovedDrugIDs() (ids []int) {
	for id := range m.removeddrug {
		ids = append(ids, id)
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
func (m *EmployeeMutation) DrugIDs() (ids []int) {
	for id := range m.drug {
		ids = append(ids, id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *EmployeeMutation) ResetDrug() {
	m.drug = nil
	m.removeddrug = nil
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (m *EmployeeMutation) AddDiagnosiIDs(ids ...int) {
	if m.diagnosis == nil {
		m.diagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.diagnosis[ids[i]] = struct{}{}
	}
}

// RemoveDiagnosiIDs removes the diagnosis edge to Diagnosis by ids.
func (m *EmployeeMutation) RemoveDiagnosiIDs(ids ...int) {
	if m.removeddiagnosis == nil {
		m.removeddiagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddiagnosis[ids[i]] = struct{}{}
	}
}

// RemovedDiagnosis returns the removed ids of diagnosis.
func (m *EmployeeMutation) RemovedDiagnosisIDs() (ids []int) {
	for id := range m.removeddiagnosis {
		ids = append(ids, id)
	}
	return
}

// DiagnosisIDs returns the diagnosis ids in the mutation.
func (m *EmployeeMutation) DiagnosisIDs() (ids []int) {
	for id := range m.diagnosis {
		ids = append(ids, id)
	}
	return
}

// ResetDiagnosis reset all changes of the "diagnosis" edge.
func (m *EmployeeMutation) ResetDiagnosis() {
	m.diagnosis = nil
	m.removeddiagnosis = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *EmployeeMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *EmployeeMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *EmployeeMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *EmployeeMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *EmployeeMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._UserId != nil {
		fields = append(fields, employee.FieldUserId)
	}
	if m._EmployeeName != nil {
		fields = append(fields, employee.FieldEmployeeName)
	}
	if m._Tel != nil {
		fields = append(fields, employee.FieldTel)
	}
	if m._BirthdayDate != nil {
		fields = append(fields, employee.FieldBirthdayDate)
	}
	if m._Email != nil {
		fields = append(fields, employee.FieldEmail)
	}
	if m._Password != nil {
		fields = append(fields, employee.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldUserId:
		return m.UserId()
	case employee.FieldEmployeeName:
		return m.EmployeeName()
	case employee.FieldTel:
		return m.Tel()
	case employee.FieldBirthdayDate:
		return m.BirthdayDate()
	case employee.FieldEmail:
		return m.Email()
	case employee.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldUserId:
		return m.OldUserId(ctx)
	case employee.FieldEmployeeName:
		return m.OldEmployeeName(ctx)
	case employee.FieldTel:
		return m.OldTel(ctx)
	case employee.FieldBirthdayDate:
		return m.OldBirthdayDate(ctx)
	case employee.FieldEmail:
		return m.OldEmail(ctx)
	case employee.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldUserId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case employee.FieldEmployeeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeName(v)
		return nil
	case employee.FieldTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTel(v)
		return nil
	case employee.FieldBirthdayDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthdayDate(v)
		return nil
	case employee.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case employee.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldUserId:
		m.ResetUserId()
		return nil
	case employee.FieldEmployeeName:
		m.ResetEmployeeName()
		return nil
	case employee.FieldTel:
		m.ResetTel()
		return nil
	case employee.FieldBirthdayDate:
		m.ResetBirthdayDate()
		return nil
	case employee.FieldEmail:
		m.ResetEmail()
		return nil
	case employee.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.department != nil {
		edges = append(edges, employee.EdgeDepartment)
	}
	if m.place != nil {
		edges = append(edges, employee.EdgePlace)
	}
	if m.nametitle != nil {
		edges = append(edges, employee.EdgeNametitle)
	}
	if m.area != nil {
		edges = append(edges, employee.EdgeArea)
	}
	if m.disease != nil {
		edges = append(edges, employee.EdgeDisease)
	}
	if m.drug != nil {
		edges = append(edges, employee.EdgeDrug)
	}
	if m.diagnosis != nil {
		edges = append(edges, employee.EdgeDiagnosis)
	}
	if m.patient != nil {
		edges = append(edges, employee.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgePlace:
		if id := m.place; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgeNametitle:
		if id := m.nametitle; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.disease))
		for id := range m.disease {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.drug))
		for id := range m.drug {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.diagnosis))
		for id := range m.diagnosis {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedarea != nil {
		edges = append(edges, employee.EdgeArea)
	}
	if m.removeddisease != nil {
		edges = append(edges, employee.EdgeDisease)
	}
	if m.removeddrug != nil {
		edges = append(edges, employee.EdgeDrug)
	}
	if m.removeddiagnosis != nil {
		edges = append(edges, employee.EdgeDiagnosis)
	}
	if m.removedpatient != nil {
		edges = append(edges, employee.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.removeddisease))
		for id := range m.removeddisease {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDrug:
		ids := make([]ent.Value, 0, len(m.removeddrug))
		for id := range m.removeddrug {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.removeddiagnosis))
		for id := range m.removeddiagnosis {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.cleareddepartment {
		edges = append(edges, employee.EdgeDepartment)
	}
	if m.clearedplace {
		edges = append(edges, employee.EdgePlace)
	}
	if m.clearednametitle {
		edges = append(edges, employee.EdgeNametitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	case employee.EdgeDepartment:
		return m.cleareddepartment
	case employee.EdgePlace:
		return m.clearedplace
	case employee.EdgeNametitle:
		return m.clearednametitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	case employee.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case employee.EdgePlace:
		m.ClearPlace()
		return nil
	case employee.EdgeNametitle:
		m.ClearNametitle()
		return nil
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case employee.EdgePlace:
		m.ResetPlace()
		return nil
	case employee.EdgeNametitle:
		m.ResetNametitle()
		return nil
	case employee.EdgeArea:
		m.ResetArea()
		return nil
	case employee.EdgeDisease:
		m.ResetDisease()
		return nil
	case employee.EdgeDrug:
		m.ResetDrug()
		return nil
	case employee.EdgeDiagnosis:
		m.ResetDiagnosis()
		return nil
	case employee.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_GenderName    *string
	clearedFields  map[string]struct{}
	patient        map[int]struct{}
	removedpatient map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGenderName sets the GenderName field.
func (m *GenderMutation) SetGenderName(s string) {
	m._GenderName = &s
}

// GenderName returns the GenderName value in the mutation.
func (m *GenderMutation) GenderName() (r string, exists bool) {
	v := m._GenderName
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderName returns the old GenderName value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGenderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderName: %w", err)
	}
	return oldValue.GenderName, nil
}

// ResetGenderName reset all changes of the "GenderName" field.
func (m *GenderMutation) ResetGenderName() {
	m._GenderName = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *GenderMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *GenderMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *GenderMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *GenderMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *GenderMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._GenderName != nil {
		fields = append(fields, gender.FieldGenderName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGenderName:
		return m.GenderName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGenderName:
		return m.OldGenderName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGenderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGenderName:
		m.ResetGenderName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient != nil {
		edges = append(edges, gender.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient != nil {
		edges = append(edges, gender.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// LevelMutation represents an operation that mutate the Levels
// nodes in the graph.
type LevelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_LevelName    *string
	clearedFields map[string]struct{}
	area          map[int]struct{}
	removedarea   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Level, error)
}

var _ ent.Mutation = (*LevelMutation)(nil)

// levelOption allows to manage the mutation configuration using functional options.
type levelOption func(*LevelMutation)

// newLevelMutation creates new mutation for $n.Name.
func newLevelMutation(c config, op Op, opts ...levelOption) *LevelMutation {
	m := &LevelMutation{
		config:        c,
		op:            op,
		typ:           TypeLevel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLevelID sets the id field of the mutation.
func withLevelID(id int) levelOption {
	return func(m *LevelMutation) {
		var (
			err   error
			once  sync.Once
			value *Level
		)
		m.oldValue = func(ctx context.Context) (*Level, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Level.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLevel sets the old Level of the mutation.
func withLevel(node *Level) levelOption {
	return func(m *LevelMutation) {
		m.oldValue = func(context.Context) (*Level, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LevelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LevelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *LevelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLevelName sets the LevelName field.
func (m *LevelMutation) SetLevelName(s string) {
	m._LevelName = &s
}

// LevelName returns the LevelName value in the mutation.
func (m *LevelMutation) LevelName() (r string, exists bool) {
	v := m._LevelName
	if v == nil {
		return
	}
	return *v, true
}

// OldLevelName returns the old LevelName value of the Level.
// If the Level object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *LevelMutation) OldLevelName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLevelName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLevelName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevelName: %w", err)
	}
	return oldValue.LevelName, nil
}

// ResetLevelName reset all changes of the "LevelName" field.
func (m *LevelMutation) ResetLevelName() {
	m._LevelName = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *LevelMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *LevelMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *LevelMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *LevelMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *LevelMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *LevelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Level).
func (m *LevelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *LevelMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._LevelName != nil {
		fields = append(fields, level.FieldLevelName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *LevelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case level.FieldLevelName:
		return m.LevelName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *LevelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case level.FieldLevelName:
		return m.OldLevelName(ctx)
	}
	return nil, fmt.Errorf("unknown Level field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LevelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case level.FieldLevelName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevelName(v)
		return nil
	}
	return fmt.Errorf("unknown Level field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *LevelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *LevelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *LevelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Level numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *LevelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *LevelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *LevelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Level nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *LevelMutation) ResetField(name string) error {
	switch name {
	case level.FieldLevelName:
		m.ResetLevelName()
		return nil
	}
	return fmt.Errorf("unknown Level field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *LevelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, level.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *LevelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case level.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *LevelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, level.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *LevelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case level.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *LevelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *LevelMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *LevelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Level unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *LevelMutation) ResetEdge(name string) error {
	switch name {
	case level.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Level edge %s", name)
}

// NametitleMutation represents an operation that mutate the Nametitles
// nodes in the graph.
type NametitleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Title          *string
	clearedFields   map[string]struct{}
	employee        map[int]struct{}
	removedemployee map[int]struct{}
	patient         map[int]struct{}
	removedpatient  map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Nametitle, error)
}

var _ ent.Mutation = (*NametitleMutation)(nil)

// nametitleOption allows to manage the mutation configuration using functional options.
type nametitleOption func(*NametitleMutation)

// newNametitleMutation creates new mutation for $n.Name.
func newNametitleMutation(c config, op Op, opts ...nametitleOption) *NametitleMutation {
	m := &NametitleMutation{
		config:        c,
		op:            op,
		typ:           TypeNametitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNametitleID sets the id field of the mutation.
func withNametitleID(id int) nametitleOption {
	return func(m *NametitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Nametitle
		)
		m.oldValue = func(ctx context.Context) (*Nametitle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nametitle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNametitle sets the old Nametitle of the mutation.
func withNametitle(node *Nametitle) nametitleOption {
	return func(m *NametitleMutation) {
		m.oldValue = func(context.Context) (*Nametitle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NametitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NametitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NametitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the Title field.
func (m *NametitleMutation) SetTitle(s string) {
	m._Title = &s
}

// Title returns the Title value in the mutation.
func (m *NametitleMutation) Title() (r string, exists bool) {
	v := m._Title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old Title value of the Nametitle.
// If the Nametitle object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NametitleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "Title" field.
func (m *NametitleMutation) ResetTitle() {
	m._Title = nil
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (m *NametitleMutation) AddEmployeeIDs(ids ...int) {
	if m.employee == nil {
		m.employee = make(map[int]struct{})
	}
	for i := range ids {
		m.employee[ids[i]] = struct{}{}
	}
}

// RemoveEmployeeIDs removes the employee edge to Employee by ids.
func (m *NametitleMutation) RemoveEmployeeIDs(ids ...int) {
	if m.removedemployee == nil {
		m.removedemployee = make(map[int]struct{})
	}
	for i := range ids {
		m.removedemployee[ids[i]] = struct{}{}
	}
}

// RemovedEmployee returns the removed ids of employee.
func (m *NametitleMutation) RemovedEmployeeIDs() (ids []int) {
	for id := range m.removedemployee {
		ids = append(ids, id)
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
func (m *NametitleMutation) EmployeeIDs() (ids []int) {
	for id := range m.employee {
		ids = append(ids, id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *NametitleMutation) ResetEmployee() {
	m.employee = nil
	m.removedemployee = nil
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (m *NametitleMutation) AddPatientIDs(ids ...int) {
	if m.patient == nil {
		m.patient = make(map[int]struct{})
	}
	for i := range ids {
		m.patient[ids[i]] = struct{}{}
	}
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (m *NametitleMutation) RemovePatientIDs(ids ...int) {
	if m.removedpatient == nil {
		m.removedpatient = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient[ids[i]] = struct{}{}
	}
}

// RemovedPatient returns the removed ids of patient.
func (m *NametitleMutation) RemovedPatientIDs() (ids []int) {
	for id := range m.removedpatient {
		ids = append(ids, id)
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
func (m *NametitleMutation) PatientIDs() (ids []int) {
	for id := range m.patient {
		ids = append(ids, id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *NametitleMutation) ResetPatient() {
	m.patient = nil
	m.removedpatient = nil
}

// Op returns the operation name.
func (m *NametitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Nametitle).
func (m *NametitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NametitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Title != nil {
		fields = append(fields, nametitle.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NametitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nametitle.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NametitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nametitle.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Nametitle field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NametitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nametitle.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Nametitle field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NametitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NametitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NametitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Nametitle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NametitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NametitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NametitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Nametitle nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NametitleMutation) ResetField(name string) error {
	switch name {
	case nametitle.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Nametitle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NametitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.employee != nil {
		edges = append(edges, nametitle.EdgeEmployee)
	}
	if m.patient != nil {
		edges = append(edges, nametitle.EdgePatient)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NametitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.employee))
		for id := range m.employee {
			ids = append(ids, id)
		}
		return ids
	case nametitle.EdgePatient:
		ids := make([]ent.Value, 0, len(m.patient))
		for id := range m.patient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NametitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedemployee != nil {
		edges = append(edges, nametitle.EdgeEmployee)
	}
	if m.removedpatient != nil {
		edges = append(edges, nametitle.EdgePatient)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NametitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nametitle.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.removedemployee))
		for id := range m.removedemployee {
			ids = append(ids, id)
		}
		return ids
	case nametitle.EdgePatient:
		ids := make([]ent.Value, 0, len(m.removedpatient))
		for id := range m.removedpatient {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NametitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NametitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NametitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Nametitle unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NametitleMutation) ResetEdge(name string) error {
	switch name {
	case nametitle.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case nametitle.EdgePatient:
		m.ResetPatient()
		return nil
	}
	return fmt.Errorf("unknown Nametitle edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Idcard          *string
	_PatientName     *string
	_Address         *string
	_Congenital      *string
	_Allergic        *string
	clearedFields    map[string]struct{}
	employee         *int
	clearedemployee  bool
	category         *int
	clearedcategory  bool
	bloodtype        *int
	clearedbloodtype bool
	gender           *int
	clearedgender    bool
	nametitle        *int
	clearednametitle bool
	diagnosis        map[int]struct{}
	removeddiagnosis map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIdcard sets the Idcard field.
func (m *PatientMutation) SetIdcard(s string) {
	m._Idcard = &s
}

// Idcard returns the Idcard value in the mutation.
func (m *PatientMutation) Idcard() (r string, exists bool) {
	v := m._Idcard
	if v == nil {
		return
	}
	return *v, true
}

// OldIdcard returns the old Idcard value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldIdcard(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdcard is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdcard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdcard: %w", err)
	}
	return oldValue.Idcard, nil
}

// ResetIdcard reset all changes of the "Idcard" field.
func (m *PatientMutation) ResetIdcard() {
	m._Idcard = nil
}

// SetPatientName sets the PatientName field.
func (m *PatientMutation) SetPatientName(s string) {
	m._PatientName = &s
}

// PatientName returns the PatientName value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._PatientName
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old PatientName value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "PatientName" field.
func (m *PatientMutation) ResetPatientName() {
	m._PatientName = nil
}

// SetAddress sets the Address field.
func (m *PatientMutation) SetAddress(s string) {
	m._Address = &s
}

// Address returns the Address value in the mutation.
func (m *PatientMutation) Address() (r string, exists bool) {
	v := m._Address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old Address value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress reset all changes of the "Address" field.
func (m *PatientMutation) ResetAddress() {
	m._Address = nil
}

// SetCongenital sets the Congenital field.
func (m *PatientMutation) SetCongenital(s string) {
	m._Congenital = &s
}

// Congenital returns the Congenital value in the mutation.
func (m *PatientMutation) Congenital() (r string, exists bool) {
	v := m._Congenital
	if v == nil {
		return
	}
	return *v, true
}

// OldCongenital returns the old Congenital value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldCongenital(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCongenital is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCongenital requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCongenital: %w", err)
	}
	return oldValue.Congenital, nil
}

// ResetCongenital reset all changes of the "Congenital" field.
func (m *PatientMutation) ResetCongenital() {
	m._Congenital = nil
}

// SetAllergic sets the Allergic field.
func (m *PatientMutation) SetAllergic(s string) {
	m._Allergic = &s
}

// Allergic returns the Allergic value in the mutation.
func (m *PatientMutation) Allergic() (r string, exists bool) {
	v := m._Allergic
	if v == nil {
		return
	}
	return *v, true
}

// OldAllergic returns the old Allergic value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAllergic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllergic is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllergic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllergic: %w", err)
	}
	return oldValue.Allergic, nil
}

// ResetAllergic reset all changes of the "Allergic" field.
func (m *PatientMutation) ResetAllergic() {
	m._Allergic = nil
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *PatientMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *PatientMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *PatientMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *PatientMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *PatientMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetCategoryID sets the category edge to Category by id.
func (m *PatientMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the category edge to Category.
func (m *PatientMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared returns if the edge category was cleared.
func (m *PatientMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the category id in the mutation.
func (m *PatientMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the category ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory reset all changes of the "category" edge.
func (m *PatientMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// SetBloodtypeID sets the bloodtype edge to Bloodtype by id.
func (m *PatientMutation) SetBloodtypeID(id int) {
	m.bloodtype = &id
}

// ClearBloodtype clears the bloodtype edge to Bloodtype.
func (m *PatientMutation) ClearBloodtype() {
	m.clearedbloodtype = true
}

// BloodtypeCleared returns if the edge bloodtype was cleared.
func (m *PatientMutation) BloodtypeCleared() bool {
	return m.clearedbloodtype
}

// BloodtypeID returns the bloodtype id in the mutation.
func (m *PatientMutation) BloodtypeID() (id int, exists bool) {
	if m.bloodtype != nil {
		return *m.bloodtype, true
	}
	return
}

// BloodtypeIDs returns the bloodtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BloodtypeID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) BloodtypeIDs() (ids []int) {
	if id := m.bloodtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBloodtype reset all changes of the "bloodtype" edge.
func (m *PatientMutation) ResetBloodtype() {
	m.bloodtype = nil
	m.clearedbloodtype = false
}

// SetGenderID sets the gender edge to Gender by id.
func (m *PatientMutation) SetGenderID(id int) {
	m.gender = &id
}

// ClearGender clears the gender edge to Gender.
func (m *PatientMutation) ClearGender() {
	m.clearedgender = true
}

// GenderCleared returns if the edge gender was cleared.
func (m *PatientMutation) GenderCleared() bool {
	return m.clearedgender
}

// GenderID returns the gender id in the mutation.
func (m *PatientMutation) GenderID() (id int, exists bool) {
	if m.gender != nil {
		return *m.gender, true
	}
	return
}

// GenderIDs returns the gender ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) GenderIDs() (ids []int) {
	if id := m.gender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGender reset all changes of the "gender" edge.
func (m *PatientMutation) ResetGender() {
	m.gender = nil
	m.clearedgender = false
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (m *PatientMutation) SetNametitleID(id int) {
	m.nametitle = &id
}

// ClearNametitle clears the nametitle edge to Nametitle.
func (m *PatientMutation) ClearNametitle() {
	m.clearednametitle = true
}

// NametitleCleared returns if the edge nametitle was cleared.
func (m *PatientMutation) NametitleCleared() bool {
	return m.clearednametitle
}

// NametitleID returns the nametitle id in the mutation.
func (m *PatientMutation) NametitleID() (id int, exists bool) {
	if m.nametitle != nil {
		return *m.nametitle, true
	}
	return
}

// NametitleIDs returns the nametitle ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NametitleID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) NametitleIDs() (ids []int) {
	if id := m.nametitle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNametitle reset all changes of the "nametitle" edge.
func (m *PatientMutation) ResetNametitle() {
	m.nametitle = nil
	m.clearednametitle = false
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (m *PatientMutation) AddDiagnosiIDs(ids ...int) {
	if m.diagnosis == nil {
		m.diagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.diagnosis[ids[i]] = struct{}{}
	}
}

// RemoveDiagnosiIDs removes the diagnosis edge to Diagnosis by ids.
func (m *PatientMutation) RemoveDiagnosiIDs(ids ...int) {
	if m.removeddiagnosis == nil {
		m.removeddiagnosis = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddiagnosis[ids[i]] = struct{}{}
	}
}

// RemovedDiagnosis returns the removed ids of diagnosis.
func (m *PatientMutation) RemovedDiagnosisIDs() (ids []int) {
	for id := range m.removeddiagnosis {
		ids = append(ids, id)
	}
	return
}

// DiagnosisIDs returns the diagnosis ids in the mutation.
func (m *PatientMutation) DiagnosisIDs() (ids []int) {
	for id := range m.diagnosis {
		ids = append(ids, id)
	}
	return
}

// ResetDiagnosis reset all changes of the "diagnosis" edge.
func (m *PatientMutation) ResetDiagnosis() {
	m.diagnosis = nil
	m.removeddiagnosis = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Idcard != nil {
		fields = append(fields, patient.FieldIdcard)
	}
	if m._PatientName != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m._Address != nil {
		fields = append(fields, patient.FieldAddress)
	}
	if m._Congenital != nil {
		fields = append(fields, patient.FieldCongenital)
	}
	if m._Allergic != nil {
		fields = append(fields, patient.FieldAllergic)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldIdcard:
		return m.Idcard()
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldAddress:
		return m.Address()
	case patient.FieldCongenital:
		return m.Congenital()
	case patient.FieldAllergic:
		return m.Allergic()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldIdcard:
		return m.OldIdcard(ctx)
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldAddress:
		return m.OldAddress(ctx)
	case patient.FieldCongenital:
		return m.OldCongenital(ctx)
	case patient.FieldAllergic:
		return m.OldAllergic(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldIdcard:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdcard(v)
		return nil
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case patient.FieldCongenital:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCongenital(v)
		return nil
	case patient.FieldAllergic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllergic(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldIdcard:
		m.ResetIdcard()
		return nil
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldAddress:
		m.ResetAddress()
		return nil
	case patient.FieldCongenital:
		m.ResetCongenital()
		return nil
	case patient.FieldAllergic:
		m.ResetAllergic()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.employee != nil {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.category != nil {
		edges = append(edges, patient.EdgeCategory)
	}
	if m.bloodtype != nil {
		edges = append(edges, patient.EdgeBloodtype)
	}
	if m.gender != nil {
		edges = append(edges, patient.EdgeGender)
	}
	if m.nametitle != nil {
		edges = append(edges, patient.EdgeNametitle)
	}
	if m.diagnosis != nil {
		edges = append(edges, patient.EdgeDiagnosis)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeBloodtype:
		if id := m.bloodtype; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeGender:
		if id := m.gender; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeNametitle:
		if id := m.nametitle; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.diagnosis))
		for id := range m.diagnosis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removeddiagnosis != nil {
		edges = append(edges, patient.EdgeDiagnosis)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDiagnosis:
		ids := make([]ent.Value, 0, len(m.removeddiagnosis))
		for id := range m.removeddiagnosis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedemployee {
		edges = append(edges, patient.EdgeEmployee)
	}
	if m.clearedcategory {
		edges = append(edges, patient.EdgeCategory)
	}
	if m.clearedbloodtype {
		edges = append(edges, patient.EdgeBloodtype)
	}
	if m.clearedgender {
		edges = append(edges, patient.EdgeGender)
	}
	if m.clearednametitle {
		edges = append(edges, patient.EdgeNametitle)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgeEmployee:
		return m.clearedemployee
	case patient.EdgeCategory:
		return m.clearedcategory
	case patient.EdgeBloodtype:
		return m.clearedbloodtype
	case patient.EdgeGender:
		return m.clearedgender
	case patient.EdgeNametitle:
		return m.clearednametitle
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case patient.EdgeCategory:
		m.ClearCategory()
		return nil
	case patient.EdgeBloodtype:
		m.ClearBloodtype()
		return nil
	case patient.EdgeGender:
		m.ClearGender()
		return nil
	case patient.EdgeNametitle:
		m.ClearNametitle()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case patient.EdgeCategory:
		m.ResetCategory()
		return nil
	case patient.EdgeBloodtype:
		m.ResetBloodtype()
		return nil
	case patient.EdgeGender:
		m.ResetGender()
		return nil
	case patient.EdgeNametitle:
		m.ResetNametitle()
		return nil
	case patient.EdgeDiagnosis:
		m.ResetDiagnosis()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PlaceMutation represents an operation that mutate the Places
// nodes in the graph.
type PlaceMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_PlaceName      *string
	clearedFields   map[string]struct{}
	employee        map[int]struct{}
	removedemployee map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Place, error)
}

var _ ent.Mutation = (*PlaceMutation)(nil)

// placeOption allows to manage the mutation configuration using functional options.
type placeOption func(*PlaceMutation)

// newPlaceMutation creates new mutation for $n.Name.
func newPlaceMutation(c config, op Op, opts ...placeOption) *PlaceMutation {
	m := &PlaceMutation{
		config:        c,
		op:            op,
		typ:           TypePlace,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlaceID sets the id field of the mutation.
func withPlaceID(id int) placeOption {
	return func(m *PlaceMutation) {
		var (
			err   error
			once  sync.Once
			value *Place
		)
		m.oldValue = func(ctx context.Context) (*Place, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Place.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlace sets the old Place of the mutation.
func withPlace(node *Place) placeOption {
	return func(m *PlaceMutation) {
		m.oldValue = func(context.Context) (*Place, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlaceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlaceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PlaceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPlaceName sets the PlaceName field.
func (m *PlaceMutation) SetPlaceName(s string) {
	m._PlaceName = &s
}

// PlaceName returns the PlaceName value in the mutation.
func (m *PlaceMutation) PlaceName() (r string, exists bool) {
	v := m._PlaceName
	if v == nil {
		return
	}
	return *v, true
}

// OldPlaceName returns the old PlaceName value of the Place.
// If the Place object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PlaceMutation) OldPlaceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlaceName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlaceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlaceName: %w", err)
	}
	return oldValue.PlaceName, nil
}

// ResetPlaceName reset all changes of the "PlaceName" field.
func (m *PlaceMutation) ResetPlaceName() {
	m._PlaceName = nil
}

// AddEmployeeIDs adds the employee edge to Employee by ids.
func (m *PlaceMutation) AddEmployeeIDs(ids ...int) {
	if m.employee == nil {
		m.employee = make(map[int]struct{})
	}
	for i := range ids {
		m.employee[ids[i]] = struct{}{}
	}
}

// RemoveEmployeeIDs removes the employee edge to Employee by ids.
func (m *PlaceMutation) RemoveEmployeeIDs(ids ...int) {
	if m.removedemployee == nil {
		m.removedemployee = make(map[int]struct{})
	}
	for i := range ids {
		m.removedemployee[ids[i]] = struct{}{}
	}
}

// RemovedEmployee returns the removed ids of employee.
func (m *PlaceMutation) RemovedEmployeeIDs() (ids []int) {
	for id := range m.removedemployee {
		ids = append(ids, id)
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
func (m *PlaceMutation) EmployeeIDs() (ids []int) {
	for id := range m.employee {
		ids = append(ids, id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *PlaceMutation) ResetEmployee() {
	m.employee = nil
	m.removedemployee = nil
}

// Op returns the operation name.
func (m *PlaceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Place).
func (m *PlaceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PlaceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._PlaceName != nil {
		fields = append(fields, place.FieldPlaceName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PlaceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case place.FieldPlaceName:
		return m.PlaceName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PlaceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case place.FieldPlaceName:
		return m.OldPlaceName(ctx)
	}
	return nil, fmt.Errorf("unknown Place field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case place.FieldPlaceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlaceName(v)
		return nil
	}
	return fmt.Errorf("unknown Place field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PlaceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PlaceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PlaceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Place numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PlaceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PlaceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlaceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Place nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PlaceMutation) ResetField(name string) error {
	switch name {
	case place.FieldPlaceName:
		m.ResetPlaceName()
		return nil
	}
	return fmt.Errorf("unknown Place field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PlaceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.employee != nil {
		edges = append(edges, place.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PlaceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case place.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.employee))
		for id := range m.employee {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PlaceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedemployee != nil {
		edges = append(edges, place.EdgeEmployee)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PlaceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case place.EdgeEmployee:
		ids := make([]ent.Value, 0, len(m.removedemployee))
		for id := range m.removedemployee {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PlaceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PlaceMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PlaceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Place unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PlaceMutation) ResetEdge(name string) error {
	switch name {
	case place.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Place edge %s", name)
}

// SeverityMutation represents an operation that mutate the Severities
// nodes in the graph.
type SeverityMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_SeverityName  *string
	clearedFields  map[string]struct{}
	disease        map[int]struct{}
	removeddisease map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Severity, error)
}

var _ ent.Mutation = (*SeverityMutation)(nil)

// severityOption allows to manage the mutation configuration using functional options.
type severityOption func(*SeverityMutation)

// newSeverityMutation creates new mutation for $n.Name.
func newSeverityMutation(c config, op Op, opts ...severityOption) *SeverityMutation {
	m := &SeverityMutation{
		config:        c,
		op:            op,
		typ:           TypeSeverity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSeverityID sets the id field of the mutation.
func withSeverityID(id int) severityOption {
	return func(m *SeverityMutation) {
		var (
			err   error
			once  sync.Once
			value *Severity
		)
		m.oldValue = func(ctx context.Context) (*Severity, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Severity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSeverity sets the old Severity of the mutation.
func withSeverity(node *Severity) severityOption {
	return func(m *SeverityMutation) {
		m.oldValue = func(context.Context) (*Severity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SeverityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SeverityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SeverityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSeverityName sets the SeverityName field.
func (m *SeverityMutation) SetSeverityName(s string) {
	m._SeverityName = &s
}

// SeverityName returns the SeverityName value in the mutation.
func (m *SeverityMutation) SeverityName() (r string, exists bool) {
	v := m._SeverityName
	if v == nil {
		return
	}
	return *v, true
}

// OldSeverityName returns the old SeverityName value of the Severity.
// If the Severity object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SeverityMutation) OldSeverityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeverityName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeverityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeverityName: %w", err)
	}
	return oldValue.SeverityName, nil
}

// ResetSeverityName reset all changes of the "SeverityName" field.
func (m *SeverityMutation) ResetSeverityName() {
	m._SeverityName = nil
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (m *SeverityMutation) AddDiseaseIDs(ids ...int) {
	if m.disease == nil {
		m.disease = make(map[int]struct{})
	}
	for i := range ids {
		m.disease[ids[i]] = struct{}{}
	}
}

// RemoveDiseaseIDs removes the disease edge to Disease by ids.
func (m *SeverityMutation) RemoveDiseaseIDs(ids ...int) {
	if m.removeddisease == nil {
		m.removeddisease = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddisease[ids[i]] = struct{}{}
	}
}

// RemovedDisease returns the removed ids of disease.
func (m *SeverityMutation) RemovedDiseaseIDs() (ids []int) {
	for id := range m.removeddisease {
		ids = append(ids, id)
	}
	return
}

// DiseaseIDs returns the disease ids in the mutation.
func (m *SeverityMutation) DiseaseIDs() (ids []int) {
	for id := range m.disease {
		ids = append(ids, id)
	}
	return
}

// ResetDisease reset all changes of the "disease" edge.
func (m *SeverityMutation) ResetDisease() {
	m.disease = nil
	m.removeddisease = nil
}

// Op returns the operation name.
func (m *SeverityMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Severity).
func (m *SeverityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SeverityMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._SeverityName != nil {
		fields = append(fields, severity.FieldSeverityName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SeverityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case severity.FieldSeverityName:
		return m.SeverityName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SeverityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case severity.FieldSeverityName:
		return m.OldSeverityName(ctx)
	}
	return nil, fmt.Errorf("unknown Severity field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SeverityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case severity.FieldSeverityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeverityName(v)
		return nil
	}
	return fmt.Errorf("unknown Severity field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SeverityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SeverityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SeverityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Severity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SeverityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SeverityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SeverityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Severity nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SeverityMutation) ResetField(name string) error {
	switch name {
	case severity.FieldSeverityName:
		m.ResetSeverityName()
		return nil
	}
	return fmt.Errorf("unknown Severity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SeverityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.disease != nil {
		edges = append(edges, severity.EdgeDisease)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SeverityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case severity.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.disease))
		for id := range m.disease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SeverityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddisease != nil {
		edges = append(edges, severity.EdgeDisease)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SeverityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case severity.EdgeDisease:
		ids := make([]ent.Value, 0, len(m.removeddisease))
		for id := range m.removeddisease {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SeverityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SeverityMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SeverityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Severity unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SeverityMutation) ResetEdge(name string) error {
	switch name {
	case severity.EdgeDisease:
		m.ResetDisease()
		return nil
	}
	return fmt.Errorf("unknown Severity edge %s", name)
}

// StatisticMutation represents an operation that mutate the Statistics
// nodes in the graph.
type StatisticMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_StatisticName *string
	clearedFields  map[string]struct{}
	area           map[int]struct{}
	removedarea    map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Statistic, error)
}

var _ ent.Mutation = (*StatisticMutation)(nil)

// statisticOption allows to manage the mutation configuration using functional options.
type statisticOption func(*StatisticMutation)

// newStatisticMutation creates new mutation for $n.Name.
func newStatisticMutation(c config, op Op, opts ...statisticOption) *StatisticMutation {
	m := &StatisticMutation{
		config:        c,
		op:            op,
		typ:           TypeStatistic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatisticID sets the id field of the mutation.
func withStatisticID(id int) statisticOption {
	return func(m *StatisticMutation) {
		var (
			err   error
			once  sync.Once
			value *Statistic
		)
		m.oldValue = func(ctx context.Context) (*Statistic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statistic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatistic sets the old Statistic of the mutation.
func withStatistic(node *Statistic) statisticOption {
	return func(m *StatisticMutation) {
		m.oldValue = func(context.Context) (*Statistic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatisticMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatisticMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StatisticMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatisticName sets the StatisticName field.
func (m *StatisticMutation) SetStatisticName(s string) {
	m._StatisticName = &s
}

// StatisticName returns the StatisticName value in the mutation.
func (m *StatisticMutation) StatisticName() (r string, exists bool) {
	v := m._StatisticName
	if v == nil {
		return
	}
	return *v, true
}

// OldStatisticName returns the old StatisticName value of the Statistic.
// If the Statistic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StatisticMutation) OldStatisticName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatisticName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatisticName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatisticName: %w", err)
	}
	return oldValue.StatisticName, nil
}

// ResetStatisticName reset all changes of the "StatisticName" field.
func (m *StatisticMutation) ResetStatisticName() {
	m._StatisticName = nil
}

// AddAreaIDs adds the area edge to Area by ids.
func (m *StatisticMutation) AddAreaIDs(ids ...int) {
	if m.area == nil {
		m.area = make(map[int]struct{})
	}
	for i := range ids {
		m.area[ids[i]] = struct{}{}
	}
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (m *StatisticMutation) RemoveAreaIDs(ids ...int) {
	if m.removedarea == nil {
		m.removedarea = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarea[ids[i]] = struct{}{}
	}
}

// RemovedArea returns the removed ids of area.
func (m *StatisticMutation) RemovedAreaIDs() (ids []int) {
	for id := range m.removedarea {
		ids = append(ids, id)
	}
	return
}

// AreaIDs returns the area ids in the mutation.
func (m *StatisticMutation) AreaIDs() (ids []int) {
	for id := range m.area {
		ids = append(ids, id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *StatisticMutation) ResetArea() {
	m.area = nil
	m.removedarea = nil
}

// Op returns the operation name.
func (m *StatisticMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Statistic).
func (m *StatisticMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StatisticMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._StatisticName != nil {
		fields = append(fields, statistic.FieldStatisticName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StatisticMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statistic.FieldStatisticName:
		return m.StatisticName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StatisticMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statistic.FieldStatisticName:
		return m.OldStatisticName(ctx)
	}
	return nil, fmt.Errorf("unknown Statistic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statistic.FieldStatisticName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatisticName(v)
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StatisticMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StatisticMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StatisticMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StatisticMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatisticMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statistic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StatisticMutation) ResetField(name string) error {
	switch name {
	case statistic.FieldStatisticName:
		m.ResetStatisticName()
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StatisticMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.area != nil {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StatisticMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeArea:
		ids := make([]ent.Value, 0, len(m.area))
		for id := range m.area {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StatisticMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedarea != nil {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StatisticMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeArea:
		ids := make([]ent.Value, 0, len(m.removedarea))
		for id := range m.removedarea {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StatisticMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StatisticMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StatisticMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StatisticMutation) ResetEdge(name string) error {
	switch name {
	case statistic.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Statistic edge %s", name)
}
