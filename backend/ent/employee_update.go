// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/B6001186/Contagions/ent/area"
	"github.com/B6001186/Contagions/ent/department"
	"github.com/B6001186/Contagions/ent/diagnosis"
	"github.com/B6001186/Contagions/ent/disease"
	"github.com/B6001186/Contagions/ent/drug"
	"github.com/B6001186/Contagions/ent/employee"
	"github.com/B6001186/Contagions/ent/nametitle"
	"github.com/B6001186/Contagions/ent/patient"
	"github.com/B6001186/Contagions/ent/place"
	"github.com/B6001186/Contagions/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks      []Hook
	mutation   *EmployeeMutation
	predicates []predicate.Employee
}

// Where adds a new predicate for the builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetUserId sets the UserId field.
func (eu *EmployeeUpdate) SetUserId(s string) *EmployeeUpdate {
	eu.mutation.SetUserId(s)
	return eu
}

// SetEmployeeName sets the EmployeeName field.
func (eu *EmployeeUpdate) SetEmployeeName(s string) *EmployeeUpdate {
	eu.mutation.SetEmployeeName(s)
	return eu
}

// SetTel sets the Tel field.
func (eu *EmployeeUpdate) SetTel(s string) *EmployeeUpdate {
	eu.mutation.SetTel(s)
	return eu
}

// SetBirthdayDate sets the BirthdayDate field.
func (eu *EmployeeUpdate) SetBirthdayDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetBirthdayDate(t)
	return eu
}

// SetEmail sets the Email field.
func (eu *EmployeeUpdate) SetEmail(s string) *EmployeeUpdate {
	eu.mutation.SetEmail(s)
	return eu
}

// SetPassword sets the Password field.
func (eu *EmployeeUpdate) SetPassword(s string) *EmployeeUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// SetDepartmentID sets the department edge to Department by id.
func (eu *EmployeeUpdate) SetDepartmentID(id int) *EmployeeUpdate {
	eu.mutation.SetDepartmentID(id)
	return eu
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDepartmentID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetDepartmentID(*id)
	}
	return eu
}

// SetDepartment sets the department edge to Department.
func (eu *EmployeeUpdate) SetDepartment(d *Department) *EmployeeUpdate {
	return eu.SetDepartmentID(d.ID)
}

// SetPlaceID sets the place edge to Place by id.
func (eu *EmployeeUpdate) SetPlaceID(id int) *EmployeeUpdate {
	eu.mutation.SetPlaceID(id)
	return eu
}

// SetNillablePlaceID sets the place edge to Place by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePlaceID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetPlaceID(*id)
	}
	return eu
}

// SetPlace sets the place edge to Place.
func (eu *EmployeeUpdate) SetPlace(p *Place) *EmployeeUpdate {
	return eu.SetPlaceID(p.ID)
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (eu *EmployeeUpdate) SetNametitleID(id int) *EmployeeUpdate {
	eu.mutation.SetNametitleID(id)
	return eu
}

// SetNillableNametitleID sets the nametitle edge to Nametitle by id if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableNametitleID(id *int) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetNametitleID(*id)
	}
	return eu
}

// SetNametitle sets the nametitle edge to Nametitle.
func (eu *EmployeeUpdate) SetNametitle(n *Nametitle) *EmployeeUpdate {
	return eu.SetNametitleID(n.ID)
}

// AddAreaIDs adds the area edge to Area by ids.
func (eu *EmployeeUpdate) AddAreaIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddAreaIDs(ids...)
	return eu
}

// AddArea adds the area edges to Area.
func (eu *EmployeeUpdate) AddArea(a ...*Area) *EmployeeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAreaIDs(ids...)
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (eu *EmployeeUpdate) AddDiseaseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddDiseaseIDs(ids...)
	return eu
}

// AddDisease adds the disease edges to Disease.
func (eu *EmployeeUpdate) AddDisease(d ...*Disease) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDiseaseIDs(ids...)
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (eu *EmployeeUpdate) AddDrugIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddDrugIDs(ids...)
	return eu
}

// AddDrug adds the drug edges to Drug.
func (eu *EmployeeUpdate) AddDrug(d ...*Drug) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDrugIDs(ids...)
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (eu *EmployeeUpdate) AddDiagnosiIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddDiagnosiIDs(ids...)
	return eu
}

// AddDiagnosis adds the diagnosis edges to Diagnosis.
func (eu *EmployeeUpdate) AddDiagnosis(d ...*Diagnosis) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDiagnosiIDs(ids...)
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (eu *EmployeeUpdate) AddPatientIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddPatientIDs(ids...)
	return eu
}

// AddPatient adds the patient edges to Patient.
func (eu *EmployeeUpdate) AddPatient(p ...*Patient) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPatientIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearDepartment clears the department edge to Department.
func (eu *EmployeeUpdate) ClearDepartment() *EmployeeUpdate {
	eu.mutation.ClearDepartment()
	return eu
}

// ClearPlace clears the place edge to Place.
func (eu *EmployeeUpdate) ClearPlace() *EmployeeUpdate {
	eu.mutation.ClearPlace()
	return eu
}

// ClearNametitle clears the nametitle edge to Nametitle.
func (eu *EmployeeUpdate) ClearNametitle() *EmployeeUpdate {
	eu.mutation.ClearNametitle()
	return eu
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (eu *EmployeeUpdate) RemoveAreaIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveAreaIDs(ids...)
	return eu
}

// RemoveArea removes area edges to Area.
func (eu *EmployeeUpdate) RemoveArea(a ...*Area) *EmployeeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAreaIDs(ids...)
}

// RemoveDiseaseIDs removes the disease edge to Disease by ids.
func (eu *EmployeeUpdate) RemoveDiseaseIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveDiseaseIDs(ids...)
	return eu
}

// RemoveDisease removes disease edges to Disease.
func (eu *EmployeeUpdate) RemoveDisease(d ...*Disease) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDiseaseIDs(ids...)
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (eu *EmployeeUpdate) RemoveDrugIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveDrugIDs(ids...)
	return eu
}

// RemoveDrug removes drug edges to Drug.
func (eu *EmployeeUpdate) RemoveDrug(d ...*Drug) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDrugIDs(ids...)
}

// RemoveDiagnosiIDs removes the diagnosis edge to Diagnosis by ids.
func (eu *EmployeeUpdate) RemoveDiagnosiIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveDiagnosiIDs(ids...)
	return eu
}

// RemoveDiagnosis removes diagnosis edges to Diagnosis.
func (eu *EmployeeUpdate) RemoveDiagnosis(d ...*Diagnosis) *EmployeeUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDiagnosiIDs(ids...)
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (eu *EmployeeUpdate) RemovePatientIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemovePatientIDs(ids...)
	return eu
}

// RemovePatient removes patient edges to Patient.
func (eu *EmployeeUpdate) RemovePatient(p ...*Patient) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePatientIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := eu.mutation.UserId(); ok {
		if err := employee.UserIdValidator(v); err != nil {
			return 0, &ValidationError{Name: "UserId", err: fmt.Errorf("ent: validator failed for field \"UserId\": %w", err)}
		}
	}
	if v, ok := eu.mutation.EmployeeName(); ok {
		if err := employee.EmployeeNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "EmployeeName", err: fmt.Errorf("ent: validator failed for field \"EmployeeName\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Tel(); ok {
		if err := employee.TelValidator(v); err != nil {
			return 0, &ValidationError{Name: "Tel", err: fmt.Errorf("ent: validator failed for field \"Tel\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "Password", err: fmt.Errorf("ent: validator failed for field \"Password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUserId,
		})
	}
	if value, ok := eu.mutation.EmployeeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeeName,
		})
	}
	if value, ok := eu.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldTel,
		})
	}
	if value, ok := eu.mutation.BirthdayDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldBirthdayDate,
		})
	}
	if value, ok := eu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if eu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PlaceTable,
			Columns: []string{employee.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PlaceTable,
			Columns: []string{employee.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.NametitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.NametitleTable,
			Columns: []string{employee.NametitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nametitle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.NametitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.NametitleTable,
			Columns: []string{employee.NametitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nametitle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AreaTable,
			Columns: []string{employee.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AreaTable,
			Columns: []string{employee.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedDiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiseaseTable,
			Columns: []string{employee.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiseaseTable,
			Columns: []string{employee.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedDrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DrugTable,
			Columns: []string{employee.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DrugTable,
			Columns: []string{employee.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiagnosisTable,
			Columns: []string{employee.DiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiagnosisTable,
			Columns: []string{employee.DiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := eu.mutation.RemovedPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PatientTable,
			Columns: []string{employee.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PatientTable,
			Columns: []string{employee.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetUserId sets the UserId field.
func (euo *EmployeeUpdateOne) SetUserId(s string) *EmployeeUpdateOne {
	euo.mutation.SetUserId(s)
	return euo
}

// SetEmployeeName sets the EmployeeName field.
func (euo *EmployeeUpdateOne) SetEmployeeName(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmployeeName(s)
	return euo
}

// SetTel sets the Tel field.
func (euo *EmployeeUpdateOne) SetTel(s string) *EmployeeUpdateOne {
	euo.mutation.SetTel(s)
	return euo
}

// SetBirthdayDate sets the BirthdayDate field.
func (euo *EmployeeUpdateOne) SetBirthdayDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetBirthdayDate(t)
	return euo
}

// SetEmail sets the Email field.
func (euo *EmployeeUpdateOne) SetEmail(s string) *EmployeeUpdateOne {
	euo.mutation.SetEmail(s)
	return euo
}

// SetPassword sets the Password field.
func (euo *EmployeeUpdateOne) SetPassword(s string) *EmployeeUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// SetDepartmentID sets the department edge to Department by id.
func (euo *EmployeeUpdateOne) SetDepartmentID(id int) *EmployeeUpdateOne {
	euo.mutation.SetDepartmentID(id)
	return euo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDepartmentID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetDepartmentID(*id)
	}
	return euo
}

// SetDepartment sets the department edge to Department.
func (euo *EmployeeUpdateOne) SetDepartment(d *Department) *EmployeeUpdateOne {
	return euo.SetDepartmentID(d.ID)
}

// SetPlaceID sets the place edge to Place by id.
func (euo *EmployeeUpdateOne) SetPlaceID(id int) *EmployeeUpdateOne {
	euo.mutation.SetPlaceID(id)
	return euo
}

// SetNillablePlaceID sets the place edge to Place by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePlaceID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetPlaceID(*id)
	}
	return euo
}

// SetPlace sets the place edge to Place.
func (euo *EmployeeUpdateOne) SetPlace(p *Place) *EmployeeUpdateOne {
	return euo.SetPlaceID(p.ID)
}

// SetNametitleID sets the nametitle edge to Nametitle by id.
func (euo *EmployeeUpdateOne) SetNametitleID(id int) *EmployeeUpdateOne {
	euo.mutation.SetNametitleID(id)
	return euo
}

// SetNillableNametitleID sets the nametitle edge to Nametitle by id if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableNametitleID(id *int) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetNametitleID(*id)
	}
	return euo
}

// SetNametitle sets the nametitle edge to Nametitle.
func (euo *EmployeeUpdateOne) SetNametitle(n *Nametitle) *EmployeeUpdateOne {
	return euo.SetNametitleID(n.ID)
}

// AddAreaIDs adds the area edge to Area by ids.
func (euo *EmployeeUpdateOne) AddAreaIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddAreaIDs(ids...)
	return euo
}

// AddArea adds the area edges to Area.
func (euo *EmployeeUpdateOne) AddArea(a ...*Area) *EmployeeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAreaIDs(ids...)
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (euo *EmployeeUpdateOne) AddDiseaseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddDiseaseIDs(ids...)
	return euo
}

// AddDisease adds the disease edges to Disease.
func (euo *EmployeeUpdateOne) AddDisease(d ...*Disease) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDiseaseIDs(ids...)
}

// AddDrugIDs adds the drug edge to Drug by ids.
func (euo *EmployeeUpdateOne) AddDrugIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddDrugIDs(ids...)
	return euo
}

// AddDrug adds the drug edges to Drug.
func (euo *EmployeeUpdateOne) AddDrug(d ...*Drug) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDrugIDs(ids...)
}

// AddDiagnosiIDs adds the diagnosis edge to Diagnosis by ids.
func (euo *EmployeeUpdateOne) AddDiagnosiIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddDiagnosiIDs(ids...)
	return euo
}

// AddDiagnosis adds the diagnosis edges to Diagnosis.
func (euo *EmployeeUpdateOne) AddDiagnosis(d ...*Diagnosis) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDiagnosiIDs(ids...)
}

// AddPatientIDs adds the patient edge to Patient by ids.
func (euo *EmployeeUpdateOne) AddPatientIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddPatientIDs(ids...)
	return euo
}

// AddPatient adds the patient edges to Patient.
func (euo *EmployeeUpdateOne) AddPatient(p ...*Patient) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPatientIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearDepartment clears the department edge to Department.
func (euo *EmployeeUpdateOne) ClearDepartment() *EmployeeUpdateOne {
	euo.mutation.ClearDepartment()
	return euo
}

// ClearPlace clears the place edge to Place.
func (euo *EmployeeUpdateOne) ClearPlace() *EmployeeUpdateOne {
	euo.mutation.ClearPlace()
	return euo
}

// ClearNametitle clears the nametitle edge to Nametitle.
func (euo *EmployeeUpdateOne) ClearNametitle() *EmployeeUpdateOne {
	euo.mutation.ClearNametitle()
	return euo
}

// RemoveAreaIDs removes the area edge to Area by ids.
func (euo *EmployeeUpdateOne) RemoveAreaIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveAreaIDs(ids...)
	return euo
}

// RemoveArea removes area edges to Area.
func (euo *EmployeeUpdateOne) RemoveArea(a ...*Area) *EmployeeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAreaIDs(ids...)
}

// RemoveDiseaseIDs removes the disease edge to Disease by ids.
func (euo *EmployeeUpdateOne) RemoveDiseaseIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveDiseaseIDs(ids...)
	return euo
}

// RemoveDisease removes disease edges to Disease.
func (euo *EmployeeUpdateOne) RemoveDisease(d ...*Disease) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDiseaseIDs(ids...)
}

// RemoveDrugIDs removes the drug edge to Drug by ids.
func (euo *EmployeeUpdateOne) RemoveDrugIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveDrugIDs(ids...)
	return euo
}

// RemoveDrug removes drug edges to Drug.
func (euo *EmployeeUpdateOne) RemoveDrug(d ...*Drug) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDrugIDs(ids...)
}

// RemoveDiagnosiIDs removes the diagnosis edge to Diagnosis by ids.
func (euo *EmployeeUpdateOne) RemoveDiagnosiIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveDiagnosiIDs(ids...)
	return euo
}

// RemoveDiagnosis removes diagnosis edges to Diagnosis.
func (euo *EmployeeUpdateOne) RemoveDiagnosis(d ...*Diagnosis) *EmployeeUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDiagnosiIDs(ids...)
}

// RemovePatientIDs removes the patient edge to Patient by ids.
func (euo *EmployeeUpdateOne) RemovePatientIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemovePatientIDs(ids...)
	return euo
}

// RemovePatient removes patient edges to Patient.
func (euo *EmployeeUpdateOne) RemovePatient(p ...*Patient) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePatientIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	if v, ok := euo.mutation.UserId(); ok {
		if err := employee.UserIdValidator(v); err != nil {
			return nil, &ValidationError{Name: "UserId", err: fmt.Errorf("ent: validator failed for field \"UserId\": %w", err)}
		}
	}
	if v, ok := euo.mutation.EmployeeName(); ok {
		if err := employee.EmployeeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "EmployeeName", err: fmt.Errorf("ent: validator failed for field \"EmployeeName\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Tel(); ok {
		if err := employee.TelValidator(v); err != nil {
			return nil, &ValidationError{Name: "Tel", err: fmt.Errorf("ent: validator failed for field \"Tel\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Email(); ok {
		if err := employee.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Password(); ok {
		if err := employee.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Password", err: fmt.Errorf("ent: validator failed for field \"Password\": %w", err)}
		}
	}

	var (
		err  error
		node *Employee
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmployeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (e *Employee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: employee.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Employee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldUserId,
		})
	}
	if value, ok := euo.mutation.EmployeeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmployeeName,
		})
	}
	if value, ok := euo.mutation.Tel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldTel,
		})
	}
	if value, ok := euo.mutation.BirthdayDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: employee.FieldBirthdayDate,
		})
	}
	if value, ok := euo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldEmail,
		})
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: employee.FieldPassword,
		})
	}
	if euo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PlaceTable,
			Columns: []string{employee.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PlaceTable,
			Columns: []string{employee.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.NametitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.NametitleTable,
			Columns: []string{employee.NametitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nametitle.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.NametitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.NametitleTable,
			Columns: []string{employee.NametitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nametitle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedAreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AreaTable,
			Columns: []string{employee.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AreaTable,
			Columns: []string{employee.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedDiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiseaseTable,
			Columns: []string{employee.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiseaseTable,
			Columns: []string{employee.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedDrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DrugTable,
			Columns: []string{employee.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DrugTable,
			Columns: []string{employee.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiagnosisTable,
			Columns: []string{employee.DiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.DiagnosisTable,
			Columns: []string{employee.DiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := euo.mutation.RemovedPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PatientTable,
			Columns: []string{employee.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.PatientTable,
			Columns: []string{employee.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	e = &Employee{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
